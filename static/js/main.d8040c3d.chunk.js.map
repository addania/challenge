{"version":3,"sources":["components/Header.js","components/List.js","components/Subheader.js","components/Chart.js","components/Filter.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Header","Row","Col","sm","style","margin","textAlign","color","borderBottom","paddingBottom","List","props","message","styling","columns","Subheader","italics","fontStyle","listItems","listItem","dimensionsColumns","length","push","key","fontSize","paddingLeft","metricsColumns","Chart","coreData","filters","onClick","applyFilters","calculatedOptions","data","filter","apply","arrayAfterFiltering","filtering","dataForFiltering","Object","values","filteredDatasources","Datasource","filteredCampaigns","Campaign","filteredArray","entries","constructor","undefined","_","i","includes","filterArray","console","log","aggregatedData","calculateAggregates","aggregatedImpressions","aggregatedClicks","aggregatedDates","aggregatedData2","impressionsForOptions","clicksForOptions","datesForOptions","chart","type","xAxis","categories","yAxis","labels","format","Highcharts","getOptions","colors","title","text","opposite","gridLineWidth","align","series","name","generateOptions","calculateOptions","backgroundColor","borderRadius","width","padding","position","marginTop","highcharts","options","array","groupByDate","groupBy","uniqueDates","keys","impressionsArray","clicksArray","dayEntry","totalImpressions","totalClicks","dataRow","Impressions","Clicks","Filter","filterColumns","onChange","dataSet","useState","styleLink","document","createElement","rel","href","head","appendChild","item","genOptions","Dropdown","placeholder","fluid","multiple","selection","inputItem","inputDataSet","uniqueValues","entry","newOptions","optionItem","optionRow","value","Button","App","setData","metrics","setMetrics","dimensions","setDimensions","setDates","selectedValues","setSelectedValues","useFilters","setUseFilters","useEffect","a","async","fetch","response","csvData","jsonData","csvJSON","formattedImpressions","formatImpressions","formattedDates","formatDate","sortedData","sortArray","tableColumns","getColumns","metricColumns","getMetrics","dimensionColumns","getDimensions","dateColumns","getDates","fetchData","styles","className","Container","e","newState","assign","csv","lines","split","result","headers","obj","currentline","j","columnValue","parseInt","input","row","dataWithDate","oldDate","Date","year","slice","month","day","dateFormatted","sortBy","inputData","inputColumns","output","col","isNumber","isString","isDate","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8040c3d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function Header() {\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <h2\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#7F6A93\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Advertising Data ETL-V Challenge\n          </h2>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function List(props) {\n  return (\n    <li>\n      {props.message}\n      <span style={props.styling}>{props.columns}s</span>\n    </li>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { List } from \"./List.js\";\n\nexport function Subheader(props) {\n  const message = \"Select zero to N \";\n  //const columnsArray= [\"Datasources\", \"Campaigns\", \"Impressions\", \"Clicks\", \"Date\"];\n  const italics = { fontStyle: \"italic\" };\n\n  const listItems = [];\n  for (\n    let listItem = 0;\n    listItem < props.dimensionsColumns.length;\n    listItem++\n  ) {\n    listItems.push(\n      <List\n        message={message}\n        columns={props.dimensionsColumns[listItem]}\n        styling={italics}\n        key={listItem}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <div\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#828282\",\n              fontSize: \"15px\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            <ul style={{ paddingLeft: \"20px\" }}>{listItems}</ul>\n            <p style={{ fontSize: \"12px\" }}>[where zero means \"All\"]</p>\n            <p>\n              Hitting \"Apply\" filters the chart to show a timeseries for both{\" \"}\n              <span style={italics}>{props.metricsColumns[0]}</span> and{\" \"}\n              <span style={italics}>{props.metricsColumns[1]}</span> for given{\" \"}\n              <span style={italics}>{props.dimensionsColumns[0]}s</span> and{\" \"}\n              <span style={italics}>{props.dimensionsColumns[1]}s</span> -\n              logical AND\n            </p>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport _ from \"lodash\";\n\nexport function Chart({ coreData, filters, applyFilters, onClick, styling }) {\n  //console.log(coreData.Date);\n  //console.log(filters);\n  //console.log(applyFilters);\n  let generateCondition;\n  let calculatedOptions = calculateOptions(coreData, filters, applyFilters);\n\n  //console.log(\"generatedOptions\", generatedOptions);\n\n  return (\n    <div>\n      <Row>\n        <Col sm={10}>\n          <h2 style={styling}>Chart</h2>\n        </Col>\n        <Col sm={2}>\n          <button\n            type=\"submit\"\n            style={{\n              backgroundColor: \"#8DA1B9\",\n              color: \"white\",\n              borderRadius: \"2px\",\n              width: \"80px\",\n              padding: \"5px 0px\",\n              position: \"left\",\n              marginTop: \"10px\",\n              position: \"absolute\",\n              right: 0,\n              bottom: 0\n            }}\n          >\n            <span onClick={onClick}>Reset</span>\n          </button>\n        </Col>\n      </Row>\n      <HighchartsReact highcharts={Highcharts} options={calculatedOptions} />\n    </div>\n  );\n}\n\nfunction calculateOptions(data, filter, apply) {\n  \n  //console.log(\"filter\", filter);\n  const arrayAfterFiltering= filterArray(filter, data);\n  console.log(\"arrayAfterFiltering\", arrayAfterFiltering);\n  const aggregatedData=calculateAggregates(arrayAfterFiltering);\n  console.log(\"aggregatedData\", aggregatedData);\n  const aggregatedImpressions=aggregatedData[0];\n  console.log(\"aggregatedImpressions\", aggregatedImpressions);\n  const aggregatedClicks=aggregatedData[1];\n  console.log(\"aggregatedClicks\", aggregatedClicks);\n  const aggregatedDates=aggregatedData[2];\n  \n  const aggregatedData2=calculateAggregates(data);\n  console.log(\"aggregatedData2\", aggregatedData2);\n  \n  const optionsFilteredData=generateOptions(aggregatedImpressions,aggregatedClicks, aggregatedDates )\n  //const optionsAllData=generateOptions(aggregatedData2)\n  //return options;\n  return optionsFilteredData;\n}\n\n\nfunction filterArray(filtering, dataForFiltering){\n\n  //const name = Object.keys(filtering);\n  const value = Object.values(filtering);\n  //console.log(\"name\", name, \"value\", value);\n  \n  const filteredDatasources = filtering.Datasource;\n  //console.log(\"filteredDatasources\", filteredDatasources)\n  const filteredCampaigns = filtering.Campaign;\n \n  let filteredArray = [];\n  if (\n    !(Object.entries(filtering).length === 0 && filtering.constructor === Object) &&\n    (filteredDatasources === undefined || filteredDatasources.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      //debugger;\n      return filteredCampaigns.includes(i.Campaign);\n    });\n    //console.log(\"filteredArray\",filteredArray);\n  } else if (\n    !(Object.entries(filtering).length === 0 && filtering.constructor === Object) &&\n    (filteredCampaigns === undefined || filteredCampaigns.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      //debugger;\n      return filteredDatasources.includes(i.Datasource);\n    });\n    //console.log(\"filteredArray\",filteredArray);\n  } else if (\n    !(Object.entries(filtering).length === 0 && filtering.constructor === Object)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      //debugger;\n      return filteredDatasources.includes(i.Datasource) && filteredCampaigns.includes(i.Campaign);\n    });\n  }\n  //console.log(\"filteredArray\", filteredArray);\n  return filteredArray;\n} \n\nfunction calculateAggregates(array){\n    console.log(\"array\", array);\n    let groupByDate = _.groupBy(array, \"Date\");\n    //console.log(\"filtere\", filtering);\n    console.log(\"groupByDate\", groupByDate);\n    let uniqueDates = _.keys(groupByDate);\n    //console.log(\"uniqueDates\", uniqueDates);\n    let impressionsArray = [];\n    let clicksArray = [];\n\n    for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\n      let totalImpressions = 0;\n      let totalClicks = 0;\n      let message2 = \"All data\";\n\n    \n      for (\n        let dataRow = 0;\n        dataRow < groupByDate[uniqueDates[dayEntry]].length;\n        dataRow++\n      ) {\n        //console.log(\"dayEntry\",dayEntry,\"uniqueDates[dayEntry]\",uniqueDates[dayEntry]);\n\n        /*let uniqueFilterEntries = _.keys(filtering);\n        console.log(\"uniqueFilterEntries\", uniqueFilterEntries);\n\n        let conditionsCheck = [];*/\n        \n        /*for (\n          let filterKey = 0;\n          filterKey < uniqueFilterEntries.length;\n          filterKey++\n        ) {\n\n        /*\n          if (\n            filtering[uniqueFilterEntries[filterKey]].includes(\n              groupByDate[uniqueDates[dayEntry]][dataRow][\n                uniqueFilterEntries[filterKey]\n              ]\n            )\n          ) {\n            conditionsCheck.push(true);\n            //console.log(filtering[uniqueFilterEntries[filterKey]], \" includes \", groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]] )\n          } else {\n            conditionsCheck.push(false);\n          }\n        }\n        //console.log(\"conditionsCheck\", conditionsCheck);\n*/\n       // if (!conditionsCheck.includes(false)) {\n          totalImpressions =\n            totalImpressions +\n            groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n          totalClicks =\n            totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n          //console.log();\n       // }\n      }\n      console.log(\"totalImpressions\", totalImpressions);\n      console.log(\"totalClicks\", totalClicks);\n      impressionsArray.push(totalImpressions);\n      clicksArray.push(totalClicks);\n      /**/\n    }\n    /*\n    console.log(\"impressionsArray\", impressionsArray);\n    console.log(\"clicksArray\", clicksArray);\n    finalImpressionsArray = impressionsArray;\n    finalClicksArray = clicksArray;\n    const sumImpressions = _.sum(impressionsArray);\n    const sumClicks = _.sum(clicksArray);\n    console.log(\"sumImpressions\", sumImpressions);\n    console.log(\"sumClicks\", sumClicks);\n\n    console.log(\"finalImpressionsArray\", finalImpressionsArray);\n    console.log(\"finalClicksArray\", finalClicksArray);\n    */\n \n\n/*\n    let groupByDate = _.groupBy(array, \"Date\");\n    //console.log(\"filtere\", filtering);\n    let uniqueDates = _.keys(groupByDate);\n    //console.log(\"uniqueDates\", uniqueDates);\n    let impressionsArray = [];\n    let clicksArray = [];\n\n    for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\n      let totalImpressions = 0;\n      let totalClicks = 0;\n      let message2 = \"All data\";\n      for (\n        let dataRow = 0;\n        dataRow < groupByDate[uniqueDates[dayEntry]].length;\n        dataRow++\n      ) {\n        console.log(\n          \"dayEntry\",\n          dayEntry,\n          \"uniqueDates[dayEntry]\",\n          uniqueDates[dayEntry]\n        );\n\n        let uniqueFilterEntries = _.keys(filtering);\n        //console.log(\"uniqueFilterEntries\", uniqueFilterEntries);\n\n        let conditionsCheck = [];\n\n        for (\n          let filterKey = 0;\n          filterKey < uniqueFilterEntries.length;\n          filterKey++\n        ) {\n          if (\n            filtering[uniqueFilterEntries[filterKey]].includes(\n              groupByDate[uniqueDates[dayEntry]][dataRow][\n                uniqueFilterEntries[filterKey]\n              ]\n            )\n          ) { \n            conditionsCheck.push(true);\n            //console.log(filtering[uniqueFilterEntries[filterKey]], \" includes \", groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]] )\n          }  else {  \n            conditionsCheck.push(false);\n          } \n        }\n        //console.log(\"conditionsCheck\", conditionsCheck);\n\n        if (!conditionsCheck.includes(false)) {\n          totalImpressions =\n            totalImpressions +\n            groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n          totalClicks =\n            totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n          console.log();\n        }\n      }\n      console.log(\"totalImpressions\", totalImpressions);\n      console.log(\"totalClicks\", totalClicks);\n      impressionsArray.push(totalImpressions);\n      clicksArray.push(totalClicks);\n    }\n    console.log(\"impressionsArray\", impressionsArray);\n    console.log(\"clicksArray\", clicksArray);\n    finalImpressionsArray = impressionsArray;\n    finalClicksArray = clicksArray;\n    const sumImpressions = _.sum(impressionsArray);\n    const sumClicks = _.sum(clicksArray);\n    console.log(\"sumImpressions\", sumImpressions);\n    console.log(\"sumClicks\", sumClicks);\n\n    console.log(\"finalImpressionsArray\", finalImpressionsArray);\n    console.log(\"finalClicksArray\", finalClicksArray); */\n    return [impressionsArray, clicksArray, uniqueDates]\n    //return 0\n  }\n\n  function generateOptions(impressionsForOptions, clicksForOptions, datesForOptions){\n    \n    const options = {\n    chart: {\n      type: \"spline\"\n    },\n    xAxis: {\n      categories: datesForOptions\n    },\n    yAxis: [\n      {\n        // Primary yAxis\n        labels: {\n          format: \"{value}\",\n\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        title: {\n          text: \"Clicks\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        opposite: false\n      },\n      {\n        // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n          text: \"Impressions\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        opposite: true\n      }\n    ],\n\n    title: {\n      text: \"Datasources\",\n      align: \"left\"\n    },\n    series: [\n      {\n        name: \"Clicks\",\n\n        data: clicksForOptions\n      },\n\n      {\n        name: \"Impressions\",\n        yAxis: 1,\n\n        data: impressionsForOptions\n      }\n    ]\n  };\n  return options\n  }","import React, { useState } from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\n  const [selectedValues, setSelectedValues] = useState();\n  //console.log(\"filterColumns\", filterColumns);\n  const columns = [];\n\n  /*for(let item=0;item<filterColumns.length;item++ ){\n    //debugger;\n    columns.push(<button key={item} name={filterColumns[item]} onClick={()=>onclick(filterColumns[item])}>{filterColumns[item]}</button>)\n    console.log(\"columns\", columns);\n  };\n  console.log(\"columns\", columns);*/\n\n  /*const options = [\n  { key: 'angular', text: 'Angular', value: 'angular', name: \"Angular\"},\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n  { key: 'ember', text: 'Ember', value: 'ember' },\n  { key: 'html', text: 'HTML', value: 'html' },\n  { key: 'ia', text: 'Information Architecture', value: 'ia' },\n  { key: 'javascript', text: 'Javascript', value: 'javascript' },\n  { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\n  { key: 'meteor', text: 'Meteor', value: 'meteor' },\n  { key: 'node', text: 'NodeJS', value: 'node' },\n  { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\n  { key: 'python', text: 'Python', value: 'python' },\n  { key: 'rails', text: 'Rails', value: 'rails' },\n  { key: 'react', text: 'React', value: 'react' },\n  { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\n  { key: 'ruby', text: 'Ruby', value: 'ruby' },\n  { key: 'ui', text: 'UI Design', value: 'ui' },\n  { key: 'ux', text: 'User Experience', value: 'ux' },\n];*/\n\n  const styleLink = document.createElement(\"link\");\n  styleLink.rel = \"stylesheet\";\n  styleLink.href =\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n  document.head.appendChild(styleLink);\n\n  /*function handleChange(e, data){\n  setSelectedValues(data.value);\n  console.log(data.value)\n}**/\n\n  for (let item = 0; item < filterColumns.length; item++) {\n    //debugger;\n    const generatedOptions = [];\n    const genOptions = generateOptions(filterColumns[item], dataSet);\n    //console.log(\"genOptions\", genOptions);\n    columns.push(\n      <div key={item}>\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {filterColumns[item]}\n        </p>\n        <Dropdown\n          key={item}\n          style={styleLink}\n          placeholder={filterColumns[item]}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      </div>\n    );\n    //console.log(\"columns\", columns);\n  }\n  //console.log(\"columns\", columns);\n\n  return (\n    <div>\n      <h2 style={styling}>Filters</h2>\n      {columns}\n\n      {/* <Dropdown style={styleLink} placeholder='Skills' fluid multiple selection options={options} onChange={onChange} />\n       */}\n    </div>\n  );\n}\n\nfunction generateOptions(inputItem, inputDataSet) {\n  let uniqueValues = [];\n  for (let entry = 0; entry < inputDataSet.length; entry++) {\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\n      uniqueValues.push(inputDataSet[entry][inputItem]);\n      //console.log(\"uniqueValues\", uniqueValues);\n    }\n  }\n  let newOptions = [];\n  for (let optionItem = 0; optionItem < uniqueValues.length; optionItem++) {\n    let optionRow = {\n      key: uniqueValues[optionItem],\n      text: uniqueValues[optionItem],\n      value: uniqueValues[optionItem]\n    };\n    newOptions.push(optionRow);\n    //console.log(\"optionRow\", optionRow);\n  }\n  //console.log(\"newOptions\", newOptions)\n  return newOptions;\n}\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport function Button({ onClick }) {\n  return (\n    <button\n      type=\"submit\"\n      style={{\n        backgroundColor: \"#8DA1B9\",\n        color: \"white\",\n        borderRadius: \"2px\",\n        width: \"80px\",\n        padding: \"5px 0px\",\n        position: \"left\",\n        marginTop: \"10px\"\n      }}\n    >\n      <span onClick={onClick}>Apply</span>\n    </button>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport _ from \"lodash\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\nimport { Chart } from \"./components/Chart.js\";\nimport { Filter } from \"./components/Filter.js\";\nimport { Button } from \"./components/Button.js\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [metrics, setMetrics] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [dates, setDates] = useState([]);\n\n  //const [data, setData] = useState([]);\n\n  const [selectedColumns, setColumns] = useState([]);\n  const [selectedValues, setSelectedValues] = useState({});\n  const [useFilters, setUseFilters] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n\n      //console.log(\"CSV IMPORT TEST\", datas);\n\n      //console.log(\"csvData\", csvData);\n      const jsonData = csvJSON(csvData);\n      //console.log(\"jsonData\", jsonData);\n      const formattedImpressions = formatImpressions(jsonData);\n      //console.log(\"formattedImpressions\", formattedImpressions);\n      const formattedDates = formatDate(formattedImpressions);\n      //console.log(\"formattedDates\", formattedDates);\n      const sortedData = sortArray(formattedDates);\n      //console.log(\"sortedData\", sortedData);\n      const tableColumns = getColumns(sortedData[0]);\n      //console.log(\"tableColumns\", tableColumns);\n      const metricColumns = getMetrics(sortedData[0], tableColumns);\n      //console.log(\"metricColumns\", metricColumns);\n      const dimensionColumns = getDimensions(sortedData[0], tableColumns);\n      //console.log(\"dimension\", dimensionColumns);\n      const dateColumns = getDates(sortedData[0], tableColumns);\n      //console.log(\"dates\", dateColumns);\n      setData(sortedData);\n      setMetrics(metricColumns);\n      setDimensions(dimensionColumns);\n      setDates(dateColumns);\n    }\n    fetchData();\n  }, []);\n\n  const styles = {\n    margin: \"30px 0px\",\n    textAlign: \"left\",\n    color: \"#8DA1B9\"\n  };\n\n  //console.log(JSON.stringify(data));\n  //const dataMulti = [{ value:'One', selected:true }, { value: 'Two' }, { value:'Three' }]\n\n  function handleChange(e, data) {\n    //console.log(\"e\", e);\n    //console.log(\"data\", data);\n    //console.log(\"data/placeholder\", data.placeholder);\n    /*if (data.placeholder ==\"Datasource\"){\n      setSelectedValues(data.value);\n    } else if (data.placeholder ==\"Campaign\"){\n      setSelectedValues2(data.value);\n    }*/\n    //console.log(\"data.value\", data.value);\n    setUseFilters(false);\n    if (data.value === undefined || data.value == 0) {\n      //debugger;\n      let newState = { ...selectedValues };\n      delete newState[data.placeholder];\n      setSelectedValues(newState);\n    } else {\n      let newState = { ...selectedValues };\n      let key = data.placeholder;\n\n      newState = Object.assign(newState, { [key]: data.value });\n      setSelectedValues(newState);\n\n      // setUseFilters(false);\n      //console.log (\"selectedValues\", selectedValues);\n\n      //console.log(\"newState\", newState);\n    }\n  }\n  function handleClick() {\n    let newState = true;\n    setUseFilters(newState);\n    // setSelectedValues({});\n  }\n\n  function handleReset() {\n    let newState = false;\n    setUseFilters(newState);\n    //setSelectedValues({});\n  }\n  //console.log(\"useFilters\", useFilters);\n\n  //console.log(\"selected values\", selectedValues);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Subheader dimensionsColumns={dimensions} metricsColumns={metrics} />\n        <Row>\n          <Col sm={4} style={{ backgroundColor: \"#EFF2F1\" }}>\n            <Filter\n              styling={styles}\n              filterColumns={dimensions}\n              onChange={handleChange}\n              dataSet={data}\n            />\n            <Button onClick={handleClick} />\n          </Col>\n          <Col sm={8}>\n            <Chart\n              coreData={data}\n              filters={selectedValues}\n              applyFilters={useFilters}\n              onClick={handleReset}\n              styling={styles}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction csvJSON(csv) {\n  var lines = csv.split(\"\\n\");\n\n  var result = [];\n\n  var headers = lines[0].split(\",\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n\n    for (var j = 0; j < headers.length; j++) {\n      const columnValue = currentline[j];\n\n      if (j == 3 || j == 4) {\n        obj[headers[j]] = parseInt(columnValue);\n      } else {\n        obj[headers[j]] = columnValue;\n      }\n    }\n\n    result.push(obj);\n  }\n\n  return result; \n}\n\nfunction formatImpressions(input) {\n  for (let row = 0; row < input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n      //console.log(\"row\", row, \"impressions\", input[row].Impressions, \"typeof\", typeof input[row].Impressions);\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n      //console.log(input[row].Clicks);\n    }\n  }\n  return input;\n}\n\nfunction formatDate(input) {\n  const dataWithDate = [];\n\n  for (let row = 0; row < input.length; row++) {\n    const entry = { ...input[row] };\n\n    //console.log(\"entry\", entry)\n    const oldDate = input[row].Date;\n    //console.log(oldDate);\n    const year = oldDate.slice(6, 10);\n    //console.log(\"year\", year);\n    const month = oldDate.slice(3, 5);\n    //console.log(\"month\", month);\n    const day = oldDate.slice(0, 2);\n    //console.log(\"day\", day);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    //console.log(\"newDate\", newDate);\n    const dateFormatted = new Date(newDate);\n    //console.log(\"dateFormatted\",dateFormatted);\n    entry.Date = dateFormatted;\n    //console.log(\"entryPOST\", entry);\n    dataWithDate.push(entry);\n  }\n  //console.log(\"dataWithDate\", dataWithDate);\n  //const output=_.sortBy(dataWithDate, [\"Date\", \"Datasource\", \"Campaign\"]);\n\n  //console.log(\"dat OUTPUT\", output);\n  return dataWithDate;\n}\n\nfunction sortArray(input) {\n  const output = _.sortBy(input, [\"Date\", \"Datasource\"]);\n  return output;\n}\n\nfunction getColumns(input) {\n  const output = Object.keys(input);\n  return output;\n}\n\nfunction getMetrics(inputData, inputColumns) {\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    //debugger;\n    const col = inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    //debugger;\n    if (_.isNumber(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n\nfunction getDimensions(inputData, inputColumns) {\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    //debugger;\n    const col = inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isString(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\nfunction getDates(inputData, inputColumns) {\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    //debugger;\n    const col = inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isDate(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n\n/*\n  import { TestData } from \"./components/TestData.js\";\n  //import dataSet from \"./data/data2.json\";\n  //console.log(\"tableColumns\", tableColumns);\n  /*DONE const dataWithDateFormat = formatDate(dataSet);\n  /*DONE const formattedImpressions=formatImpressions(dataWithDateFormat);\n  //console.log(\"dataWithDateFormat\", dataWithDateFormat);\n  /*DONE const sortedData = sortArray(formattedImpressions);\n  //console.log(\"sorted data\", sortedData);\n  /*DONE const tableColumns = getColumns(dataSet);\n  /*DONE const metrics = getMetrics(sortedData, tableColumns);\n  //console.log(\"metrics\", metrics);\n  /* DONE const dimensions = getDimensions(sortedData, tableColumns);\n  //console.log(\"dimension\", dimensions);\n  /* DONE const dates = getDates(sortedData, tableColumns);\n  //console.log(\"dates\", dates);\n  */\n\n/* useEffect(()=> {\n  const data =\n    fetch(\"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\").then(response => {\n      return response.text()\n    }).then(d => {\n      setDatas(d);\n      console.log(\"CSV IMPORT TEST\", datas);\n      const a=datas[0];\n    })\n  } ,[])*/\n\n//const jsonBLA=csvJSON(datas);\n/*\n  const [data, setData] = useState([ \n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"B2B - Leads\",\n      AdGroup: \"A\",\n      Clicks: 7,\n      Impressions: 444\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"B\",\n      Clicks: 16,\n      Impressions: 12535\n    },\n    {\n      Date: \"20.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"A\",\n      Clicks: 250,\n      Impressions: 10535\n    }\n  ]);\n  */\n/*\n  const [data, setData] = useState([\n    {\n      Date: \"23.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Like Ads\",\n      AdGroup: \"A\",\n      Clicks: 274,\n      Impressions: 1979\n    },\n    {\n      Date: \"08.02.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Like Ads\",\n      AdGroup: \"A\",\n      Clicks: 274,\n      Impressions: 1979\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Like Ads\",\n      AdGroup: \"A\",\n      Clicks: 274,\n      Impressions: 1979\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"B2B - Leads\",\n      AdGroup: \"A\",\n      Clicks: 7,\n      Impressions: 444\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"B\",\n      Clicks: 16,\n      Impressions: 12535\n    },\n    {\n      Date: \"20.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"A\",\n      Clicks: 250,\n      Impressions: 10535\n    },\n    {\n      Date: \"01.03.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.04.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.05.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.06.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.07.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.08.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.09.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.10.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.11.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.12.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    }\n  ]);\n  */\n/*const testDates = [\n    sortedData[0].Date,\n    sortedData[1].Date,\n    sortedData[2].Date,\n    sortedData[3].Date,\n    sortedData[4].Date\n  ];*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}