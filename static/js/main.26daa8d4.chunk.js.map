{"version":3,"sources":["components/Header.js","components/List.js","components/Subheader.js","functions/calculateAggregates.js","functions/generateList.js","functions/calculateOptions.js","functions/generateOptions.js","functions/filterArray.js","functions/generateMessage.js","components/Chart.js","components/Filter.js","components/Button.js","functions/csvJSON.js","functions/formatImpressions.js","functions/extractDate.js","functions/getColumns.js","functions/getMetrics.js","functions/getDimensions.js","functions/getDates.js","functions/formatDate.js","App.js","functions/sortArray.js","serviceWorker.js","index.js"],"names":["Header","Row","Col","sm","style","margin","textAlign","color","borderBottom","paddingBottom","List","props","message","styling","columns","Subheader","italics","fontStyle","listItems","listItem","dimensionsColumns","length","push","key","fontSize","paddingLeft","metricsColumns","calculateAggregates","array","groupByDate","_","groupBy","uniqueDates","keys","impressionsArray","clicksArray","dayEntry","totalImpressions","totalClicks","dataRow","Impressions","Clicks","generateList","filterItem","console","log","newString","string","entry","JSON","stringify","slice","calculateOptions","data","filter","apply","aggregatedImpressions","aggregatedClicks","aggregatedDates","impressionsForOptions","clicksForOptions","messageForOptions","aggregatedData","filtering","dataForFiltering","filteredDatasources","Datasource","filteredCampaigns","Campaign","filteredArray","Object","entries","constructor","undefined","i","includes","filterArray","filterForMessage","datasourceMessage","campaignMessage","generateMessage","chart","type","xAxis","categories","yAxis","labels","format","Highcharts","getOptions","colors","title","text","opposite","gridLineWidth","align","series","name","Chart","coreData","filters","applyFilters","onClick","calculatedOptions","highcharts","options","Filter","filterColumns","onChange","dataSet","item","genOptions","generateOptions","marginTop","Dropdown","placeholder","fluid","multiple","selection","inputItem","inputDataSet","uniqueValues","newOptions","optionItem","optionRow","value","Button","backgroundColor","borderRadius","width","padding","position","csvJSON","csv","lines","split","result","headers","obj","currentline","j","columnValue","parseInt","pop","formatImpressions","input","row","extractDate","dataWithDate","oldDate","Date","year","month","day","dateFormatted","getColumns","getMetrics","inputData","inputColumns","output","col","isNumber","getDimensions","isString","getDates","isDate","moment","require","formatDate","formattedDateArray","App","useState","setData","metrics","setMetrics","dimensions","setDimensions","setDates","selectedValues","setSelectedValues","useFilters","setUseFilters","filteredData","setFilteredData","useEffect","a","async","fetch","response","csvData","jsonData","formattedImpressions","formattedDates","sortedData","sortBy","tableColumns","metricColumns","dimensionColumns","dateColumns","finalData","fetchData","styles","className","Container","paddingRight","e","newState","assign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26daa8d4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function Header() {\n  // Defines a header to be displayed as a title on the pages\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <h2\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#7F6A93\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Advertising Data ETL-V Challenge\n          </h2>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function List(props) {\n  // Defines a list component to be used in Subheader component\n  return (\n    <li>\n      {props.message}\n      <span style={props.styling}>{props.columns}s</span>\n    </li>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { List } from \"./List.js\";\n\nexport function Subheader(props) {\n  // Defines a component Subheaher with more information about the application.\n  const message = \"Select zero to N \";\n  const italics = { fontStyle: \"italic\" };\n  const listItems = [];\n  for (\n    let listItem = 0;\n    listItem < props.dimensionsColumns.length;\n    listItem++\n  ) {\n    listItems.push(\n      <List\n        message={message}\n        columns={props.dimensionsColumns[listItem]}\n        styling={italics}\n        key={listItem}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <div\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#828282\",\n              fontSize: \"15px\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            <ul style={{ paddingLeft: \"20px\" }}>{listItems}</ul>\n            <p style={{ fontSize: \"12px\" }}>[where zero means \"All\"]</p>\n            <p>\n              Hitting \"Apply\" filters the chart to show a timeseries for both{\" \"}\n              <span style={italics}>{props.metricsColumns[0]}</span> and{\" \"}\n              <span style={italics}>{props.metricsColumns[1]}</span> for given{\" \"}\n              <span style={italics}>{props.dimensionsColumns[0]}s</span> and{\" \"}\n              <span style={italics}>{props.dimensionsColumns[1]}s</span> -\n              logical AND\n            </p>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import _ from \"lodash\";\n\nexport function calculateAggregates(array) {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  let groupByDate = _.groupBy(array, \"Date\");\n  let uniqueDates = _.keys(groupByDate);\n  let impressionsArray = [];\n  let clicksArray = [];\n\n  for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\n    let totalImpressions = 0;\n    let totalClicks = 0;\n\n    for (\n      let dataRow = 0;\n      dataRow < groupByDate[uniqueDates[dayEntry]].length;\n      dataRow++\n    ) {\n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n    }\n    impressionsArray.push(totalImpressions);\n    clicksArray.push(totalClicks);\n  }\n  return [impressionsArray, clicksArray, uniqueDates];\n}\n","export function generateList(filterItem) {\n  // Receives an array of filter values. Generates a string of maximum 3 values\n  // if multiple filter values are selected.\n  console.log(\"filterItem\", filterItem);\n  let string = \"\";\n  let newString;\n  for (let entry = 0; entry < filterItem.length && entry < 3; entry++) {\n    string = string + JSON.stringify(filterItem[entry]) + \" and \";\n  }\n\n  if (filterItem.length <= 3) {\n    newString = string.slice(0, -4);\n  } else {\n    newString = string.slice(0, -5) + \", etc.\";\n  }\n    console.log(\"newString\", newString);\n  return newString;\n}\n","import { filterArray } from \"./filterArray\";\nimport { calculateAggregates } from \"./calculateAggregates\";\nimport { generateMessage } from \"./generateMessage\";\nimport { generateOptions } from \"./generateOptions\";\n\nexport function calculateOptions(data, filter, apply) {\n  // As input receives data, filter and condition whether to apply filter or not.\n  // Outputs options for HighchartsReact to display either filtered data or entire data set.\n  let aggregatedImpressions;\n  let aggregatedClicks;\n  let aggregatedDates;\n  let message = \"\";\n  if (apply) {\n    const arrayAfterFiltering = filterArray(filter, data);\n    const aggregatedData = calculateAggregates(arrayAfterFiltering);\n    aggregatedImpressions = aggregatedData[0];\n    aggregatedClicks = aggregatedData[1];\n    aggregatedDates = aggregatedData[2];\n    message = generateMessage(filter);\n  } else {\n    const aggregatedData = calculateAggregates(data);\n    aggregatedImpressions = aggregatedData[0];\n    aggregatedClicks = aggregatedData[1];\n    aggregatedDates = aggregatedData[2];\n    message = \"All Datasources; All Campaigns\";\n  }\n  const optionsFilteredData = generateOptions(\n    aggregatedImpressions,\n    aggregatedClicks,\n    aggregatedDates,\n    message\n  );\n  return optionsFilteredData;\n}\n","import Highcharts from \"highcharts\";\n\nexport function generateOptions(\n  impressionsForOptions,\n  clicksForOptions,\n  datesForOptions,\n  messageForOptions\n) {\n  // Recives array of impressions, array of clicks and array of unique dates as input.\n  // Outputs options to visualize data on a HighchartsReact component.\n  const options = {\n    chart: {\n      type: \"spline\"\n    },\n    xAxis: {\n      categories: datesForOptions\n    },\n    yAxis: [\n      {\n        // Primary yAxis\n        labels: {\n          format: \"{value}\",\n\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        title: {\n          text: \"Clicks\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        opposite: false\n      },\n      {\n        // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n          text: \"Impressions\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        opposite: true\n      }\n    ],\n\n    title: {\n      text: messageForOptions,\n      align: \"left\"\n    },\n    series: [\n      {\n        name: \"Clicks\",\n\n        data: clicksForOptions\n      },\n\n      {\n        name: \"Impressions\",\n        yAxis: 1,\n\n        data: impressionsForOptions\n      }\n    ]\n  };\n  return options;\n}\n","import _ from \"lodash\";\n\nexport function filterArray(filtering, dataForFiltering) {\n  // Receives data for filtering and filters in order to calculate subset of data which was filtered.\n  // Outputs filtered array.\n  const filteredDatasources = filtering.Datasource;\n  const filteredCampaigns = filtering.Campaign;\n  let filteredArray = [];\n  if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    ) &&\n    (filteredDatasources === undefined || filteredDatasources.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return filteredCampaigns.includes(i.Campaign);\n    });\n  } else if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    ) &&\n    (filteredCampaigns === undefined || filteredCampaigns.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return filteredDatasources.includes(i.Datasource);\n    });\n  } else if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    )\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return (\n        filteredDatasources.includes(i.Datasource) &&\n        filteredCampaigns.includes(i.Campaign)\n      );\n    });\n  }\n  return filteredArray;\n}\n","import { generateList } from \"./generateList\";\n\nexport function generateMessage(filterForMessage) {\n  // Receives filter as input and generates corresponding message\n  let filterMessage = \"\";\n  let datasourceMessage = \"\";\n  let campaignMessage = \"\";\n  if (\n    filterForMessage[\"Campaign\"] == undefined &&\n    filterForMessage[\"Datasource\"] != undefined\n  ) {\n    campaignMessage = \"All Campaigns\";\n    let datasourcesList = generateList(filterForMessage.Datasource);\n    datasourceMessage = \"Datasource \" + datasourcesList;\n  } else if (\n    filterForMessage[\"Datasource\"] == undefined &&\n    filterForMessage[\"Campaign\"] != undefined\n  ) {\n    datasourceMessage = \"All Datasources\";\n    let campaignsList = generateList(filterForMessage.Campaign);\n    campaignMessage = \"Campaign \" + campaignsList;\n  } else if (\n    filterForMessage[\"Campaign\"] == undefined &&\n    filterForMessage[\"Datasource\"] == undefined\n  ) {\n    datasourceMessage = \"All Datasources \";\n    campaignMessage = \"All Campaigns\";\n  } else {\n    let datasourcesList = generateList(filterForMessage.Datasource);\n    let campaignsList = generateList(filterForMessage.Campaign);\n    datasourceMessage = \"Datasource \" + datasourcesList;\n    campaignMessage = \"Campaign \" + campaignsList;\n  }\n  filterMessage = datasourceMessage + \"; \" + campaignMessage;\n  return filterMessage;\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { calculateOptions } from \"../functions/calculateOptions\";\n\nexport function Chart({ coreData, filters, applyFilters, onClick, styling }) {\n  // Defines a visualization components which will render a HighchartsReact component\n  // based on options generated from data and filters\n  let calculatedOptions = calculateOptions(coreData, filters, applyFilters);\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <h2 style={styling}>Chart</h2>\n        </Col>\n      </Row>\n      <HighchartsReact highcharts={Highcharts} options={calculatedOptions} />\n    </div>\n  );\n}\n/*\nfunction calculateOptions(data, filter, apply) {\n  // As input receives data, filter and condition whether to apply filter or not.\n  // Outputs options for HighchartsReact to display either filtered data or entire data set.\n  let aggregatedImpressions;\n  let aggregatedClicks;\n  let aggregatedDates;\n  let message = \"\";\n  if (apply) {\n    const arrayAfterFiltering = filterArray(filter, data);\n    const aggregatedData = calculateAggregates(arrayAfterFiltering);\n    aggregatedImpressions = aggregatedData[0];\n    aggregatedClicks = aggregatedData[1];\n    aggregatedDates = aggregatedData[2];\n    message = generateMessage(filter);\n  } else {\n    const aggregatedData = calculateAggregates(data);\n    aggregatedImpressions = aggregatedData[0];\n    aggregatedClicks = aggregatedData[1];\n    aggregatedDates = aggregatedData[2];\n    message = \"All Datasources; All Campaigns\";\n  }\n  const optionsFilteredData = generateOptions(\n    aggregatedImpressions,\n    aggregatedClicks,\n    aggregatedDates,\n    message\n  );\n  return optionsFilteredData;\n}\n\nfunction filterArray(filtering, dataForFiltering) {\n  // Receives data for filtering and filters in order to calculate subset of data which was filtered.\n  // Outputs filtered array.\n  const filteredDatasources = filtering.Datasource;\n  const filteredCampaigns = filtering.Campaign;\n  let filteredArray = [];\n  if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    ) &&\n    (filteredDatasources === undefined || filteredDatasources.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return filteredCampaigns.includes(i.Campaign);\n    });\n  } else if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    ) &&\n    (filteredCampaigns === undefined || filteredCampaigns.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return filteredDatasources.includes(i.Datasource);\n    });\n  } else if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    )\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return (\n        filteredDatasources.includes(i.Datasource) &&\n        filteredCampaigns.includes(i.Campaign)\n      );\n    });\n  }\n  return filteredArray;\n}\n\nfunction calculateAggregates(array) {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  let groupByDate = _.groupBy(array, \"Date\");\n  let uniqueDates = _.keys(groupByDate);\n  let impressionsArray = [];\n  let clicksArray = [];\n\n  for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\n    let totalImpressions = 0;\n    let totalClicks = 0;\n\n    for (\n      let dataRow = 0;\n      dataRow < groupByDate[uniqueDates[dayEntry]].length;\n      dataRow++\n    ) {\n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n    }\n    impressionsArray.push(totalImpressions);\n    clicksArray.push(totalClicks);\n  }\n  return [impressionsArray, clicksArray, uniqueDates];\n}\n\nfunction generateOptions(\n  impressionsForOptions,\n  clicksForOptions,\n  datesForOptions,\n  messageForOptions\n) {\n  // Recives array of impressions, array of clicks and array of unique dates as input.\n  // Outputs options to visualize data on a HighchartsReact component.\n  const options = {\n    chart: {\n      type: \"spline\"\n    },\n    xAxis: {\n      categories: datesForOptions\n    },\n    yAxis: [\n      {\n        // Primary yAxis\n        labels: {\n          format: \"{value}\",\n\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        title: {\n          text: \"Clicks\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        opposite: false\n      },\n      {\n        // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n          text: \"Impressions\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        opposite: true\n      }\n    ],\n\n    title: {\n      text: messageForOptions,\n      align: \"left\"\n    },\n    series: [\n      {\n        name: \"Clicks\",\n\n        data: clicksForOptions\n      },\n\n      {\n        name: \"Impressions\",\n        yAxis: 1,\n\n        data: impressionsForOptions\n      }\n    ]\n  };\n  return options;\n}\n\nfunction generateMessage(filterForMessage) {\n  // Receives filter as input and generates corresponding message\n  let filterMessage = \"\";\n  let datasourceMessage = \"\";\n  let campaignMessage = \"\";\n  if (\n    filterForMessage[\"Campaign\"] == undefined &&\n    filterForMessage[\"Datasource\"] != undefined\n  ) {\n    campaignMessage = \"All Campaigns\";\n    let datasourcesList = generateList(filterForMessage.Datasource);\n    datasourceMessage = \"Datasource \" + datasourcesList;\n  } else if (\n    filterForMessage[\"Datasource\"] == undefined &&\n    filterForMessage[\"Campaign\"] != undefined\n  ) {\n    datasourceMessage = \"All Datasources\";\n    let campaignsList = generateList(filterForMessage.Campaign);\n    campaignMessage = \"Campaign \" + campaignsList;\n  } else if (\n    filterForMessage[\"Campaign\"] == undefined &&\n    filterForMessage[\"Datasource\"] == undefined\n  ) {\n    datasourceMessage = \"All Datasources \";\n    campaignMessage = \"All Campaigns\";\n  } else {\n    let datasourcesList = generateList(filterForMessage.Datasource);\n    let campaignsList = generateList(filterForMessage.Campaign);\n    datasourceMessage = \"Datasource \" + datasourcesList;\n    campaignMessage = \"Campaign \" + campaignsList;\n  }\n  filterMessage = datasourceMessage + \"; \" + campaignMessage;\n  return filterMessage;\n}\n\nfunction generateList(filterItem) {\n  // Receives an array of filter values. Generates a string of maximum 3 values\n  // if multiple filter values are selected.\n  let string = \"\";\n  let newString;\n  for (let entry = 0; entry < filterItem.length && entry < 3; entry++) {\n    string = string + JSON.stringify(filterItem[entry]) + \" and \";\n  }\n\n  if (filterItem.length <= 3) {\n    newString = string.slice(0, -4);\n  } else {\n    newString = string.slice(0, -5) + \", etc.\";\n  }\n  return newString;\n}\n*/\n","import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  const columns = [];\n\n  for (let item = 0; item < filterColumns.length; item++) {\n    const genOptions = generateOptions(filterColumns[item], dataSet);\n    columns.push(\n      <div key={item}>\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {filterColumns[item]}\n        </p>\n        <Dropdown\n          key={item}\n          placeholder={filterColumns[item]}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h2 style={styling}>Filters</h2>\n      {columns}\n    </div>\n  );\n}\n\nfunction generateOptions(inputItem, inputDataSet) {\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  let uniqueValues = [];\n  for (let entry = 0; entry < inputDataSet.length; entry++) {\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\n      uniqueValues.push(inputDataSet[entry][inputItem]);\n    }\n  }\n  let newOptions = [];\n  for (let optionItem = 0; optionItem < uniqueValues.length; optionItem++) {\n    let optionRow = {\n      key: uniqueValues[optionItem],\n      text: uniqueValues[optionItem],\n      value: uniqueValues[optionItem]\n    };\n    newOptions.push(optionRow);\n  }\n  return newOptions;\n}\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport function Button({ onClick }) {\n  // Defines a button Apply to apply selected filter options on Chart component\n  return (\n    <button\n      type=\"submit\"\n      style={{\n        backgroundColor: \"#8DA1B9\",\n        color: \"white\",\n        borderRadius: \"2px\",\n        width: \"80px\",\n        padding: \"5px 0px\",\n        position: \"left\",\n        marginTop: \"10px\"\n      }}\n    >\n      <span onClick={onClick}>Apply</span>\n    </button>\n  );\n}\n","export function csvJSON(csv) {\n  // Receives a comma separated csv file as input. Outputs array of objects as result.\n  var lines = csv.split(\"\\n\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n    for (var j = 0; j < headers.length; j++) {\n      const columnValue = currentline[j];\n      if (j === 3 || j === 4) {\n        obj[headers[j]] = parseInt(columnValue);\n      } else {\n        obj[headers[j]] = columnValue;\n      }\n    }\n    result.push(obj);\n  }\n  let removeLast = result.pop();\n  return result;\n}\n","export function formatImpressions(input) {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n  for (let row = 0; row < input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n    }\n  }\n  return input;\n}\n","export function extractDate(input) {\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  const dataWithDate = [];\n  for (let row = 0; row < input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n    const year = oldDate.slice(6, 10);\n    const month = oldDate.slice(3, 5);\n    const day = oldDate.slice(0, 2);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    const dateFormatted = new Date(newDate);\n    entry.Date = dateFormatted;\n    dataWithDate.push(entry);\n  }\n  return dataWithDate;\n}\n","export function getColumns(input) {\n  // Receives an array of objects as input and outputs an array with unique keys (columns).\n  const output = Object.keys(input);\n  return output;\n}\n","import _ from \"lodash\";\n\nexport function getMetrics(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isNumber(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n","import _ from \"lodash\";\n\nexport function getDimensions(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isString(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n","import _ from \"lodash\";\n\nexport function getDates(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds date values.\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isDate(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n","import _ from \"lodash\";\nconst moment = require(\"moment\");\n\nexport function formatDate(input) {\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\n  const formattedDateArray = [];\n  for (let row = 0; row < input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\n    entry.Date = dateFormatted;\n    formattedDateArray.push(entry);\n  }\n  return formattedDateArray;\n}\n","import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\nimport { Chart } from \"./components/Chart.js\";\nimport { Filter } from \"./components/Filter.js\";\nimport { Button } from \"./components/Button.js\";\nimport { csvJSON } from \"./functions/csvJSON\";\nimport { formatImpressions } from \"./functions/formatImpressions\";\nimport { extractDate } from \"./functions/extractDate\";\nimport { sortArray } from \"./functions/sortArray\";\nimport { getColumns } from \"./functions/getColumns\";\nimport { getMetrics } from \"./functions/getMetrics\";\nimport { getDimensions } from \"./functions/getDimensions\";\nimport { getDates } from \"./functions/getDates\";\nimport { formatDate } from \"./functions/formatDate\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [metrics, setMetrics] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [selectedValues, setSelectedValues] = useState({});\n  const [useFilters, setUseFilters] = useState(false);\n  const [filteredData, setFilteredData] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        // VERSION FOR PUBLISHING ON GH-PAGES:\n        //\"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n      const jsonData = csvJSON(csvData);\n      const formattedImpressions = formatImpressions(jsonData);\n      const formattedDates = extractDate(formattedImpressions);\n      const sortedData = sortArray(formattedDates);\n      const tableColumns = getColumns(sortedData[0]);\n      const metricColumns = getMetrics(sortedData[0], tableColumns);\n      const dimensionColumns = getDimensions(sortedData[0], tableColumns);\n      const dateColumns = getDates(sortedData[0], tableColumns);\n      const finalData = formatDate(sortedData);\n      setData(finalData);\n      setMetrics(metricColumns);\n      setDimensions(dimensionColumns);\n      setDates(dateColumns);\n    }\n    fetchData();\n  }, []);\n\n  const styles = {\n    margin: \"30px 0px\",\n    textAlign: \"left\",\n    color: \"#8DA1B9\"\n  };\n\n  function handleChange(e, data) {\n    // Function is triggered on every change of Filter component. Receives information about event as input.\n    // Sets selectedValues state with information about which columns and their values were selected.\n    // Sets useFilter state to false when new filter was selected but button Apply was not yet clicked.\n    if (data.value === undefined || data.value == 0) {\n      let newState = { ...selectedValues };\n      delete newState[data.placeholder];\n      setSelectedValues(newState);\n    } else {\n      let newState = { ...selectedValues };\n      let key = data.placeholder;\n      newState = Object.assign(newState, { [key]: data.value });\n      setSelectedValues(newState);\n    }\n  }\n  function handleClick() {\n    // Function is triggered on every click on the Button Apply component.\n    // Sets useFilter state to true when the button Apply was clicked (unless filters are empty).\n    if (\n      !(\n        Object.entries(selectedValues).length === 0 &&\n        selectedValues.constructor === Object\n      )\n    ) {\n      let newState = true;\n      setUseFilters(newState);\n      setFilteredData(selectedValues);\n    } else {\n      let newState = false;\n      setUseFilters(newState);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Subheader dimensionsColumns={dimensions} metricsColumns={metrics} />\n        <Row style={{ paddingLeft: \"15px\", paddingRight: \"15px\" }}>\n          <Col sm={4} style={{ backgroundColor: \"#EFF2F1\" }}>\n            <Filter\n              styling={styles}\n              filterColumns={dimensions}\n              onChange={handleChange}\n              dataSet={data}\n            />\n            <Button onClick={handleClick} />\n          </Col>\n          <Col sm={8}>\n            <Chart\n              coreData={data}\n              filters={filteredData}\n              applyFilters={useFilters}\n              styling={styles}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import _ from \"lodash\";\n\nexport function sortArray(input) {\n  // Receives an array of objects as input and sorts the entries based on Date, Datasource and Campaign as output.\n  const output = _.sortBy(input, [\"Date\", \"Datasource\", \"Campaign\"]);\n  return output;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}