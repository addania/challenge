{"version":3,"sources":["components/Header.js","components/List.js","components/SubheaderList.js","components/Subheader.js","functions/generateChartOptions.js","components/Chart.js","components/Filters.js","components/Button.js","functions/parseData.js","functions/handleClickHelper.js","App.js","functions/handleChangeHelper.js","serviceWorker.js","index.js"],"names":["Header","sm","data-testid","style","margin","textAlign","color","borderBottom","paddingBottom","List","message","columns","styling","SubheaderList","dimensions","italicsInput","map","item","key","Subheader","dimensionsColumns","metricsColumns","italics","fontStyle","fontSize","paddingLeft","filterArray","filter","data","Object","entries","length","constructor","undefined","datasource","campaign","includes","aggregate","array","groupByDate","_","groupBy","impressions","type","name","yAxis","generateChartAggregates","clicks","metric","keys","sum","reduce","accumulator","object","parseInt","getChartTitle","getTitleList","filterItem","valuesArray","slice","JSON","stringify","join","getChartData","title","chart","zoomType","text","align","xAxis","dateTimeLabelFormats","day","labels","format","Highcharts","getOptions","colors","opposite","gridLineWidth","legend","enabled","series","Chart","apply","coreData","filters","applyFilters","highcharts","options","Filters","filterColumns","onChange","dataSet","marginTop","placeholder","fluid","multiple","selection","generateFilterOptions","inputItem","inputDataSet","Set","value","Button","onClick","backgroundColor","borderRadius","width","padding","position","parseData","csvData","sortedData","sortArray","extractDate","formatMetrics","parseCsv","metrics","getMetrics","getColumns","getDimensions","csv","objectArray","split","date","input","row","entry","Date","parse","sortBy","inputData","inputColumns","column","handleClickHelper","selectedValues","applyFilter","filterValue","App","React","setData","setMetrics","setDimensions","setSelectedValues","useFilters","setUseFilters","filteredData","setFilteredData","a","async","fetch","response","rawData","fetchData","styles","className","paddingRight","event","assign","handleChangeHelper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f02c940d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const Header = () => (\n  // Defines a header to be displayed as a title on the pages\n  <div>\n    <Bootstrap.Row>\n      <Bootstrap.Col sm={12}>\n        <h2\n          data-testid=\"header\"\n          style={{\n            margin: \"20px 0px\",\n            textAlign: \"left\",\n            color: \"#7F6A93\",\n            borderBottom: \"0.5px solid #E8E8EA\",\n            paddingBottom: \"20px\"\n          }}\n        >\n          Advertising Data ETL-V Challenge\n        </h2>\n      </Bootstrap.Col>\n    </Bootstrap.Row>\n  </div>\n);\n","import * as React from \"react\";\n\nexport const List = ({ message, columns, styling }) => (\n  // Defines a list component to be used in Subheader component\n  <li data-testid=\"list\">\n    {message}\n    <span style={styling}>{columns}s</span>\n  </li>\n);\n","import * as React from \"react\";\nimport { List } from \"../components/List.js\";\n\nexport const SubheaderList = ({ dimensions, italicsInput }) =>\n  dimensions.map(item => (\n    <List\n      data-testid=\"test\"\n      message=\"Select zero to N \"\n      columns={item}\n      styling={italicsInput}\n      key={item}\n    />\n  ));\n","import * as React from \"react\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { SubheaderList } from \"./SubheaderList\";\n\nexport const Subheader = ({ dimensionsColumns, metricsColumns }) => {\n  // Defines a component Subheaher with more information about the application.\n  const italics = { fontStyle: \"italic\" };\n  return (\n    <div>\n      <Bootstrap.Row>\n        <Bootstrap.Col sm={12}>\n          <div\n            data-testid=\"subheader\"\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#828282\",\n              fontSize: \"15px\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            <ul style={{ paddingLeft: \"20px\" }}>\n              <SubheaderList\n                dimensions={dimensionsColumns}\n                italicsInput={italics}\n              />\n            </ul>\n            <p style={{ fontSize: \"12px\" }}>[where zero means \"All\"]</p>\n            <p>\n              Hitting \"Apply\" filters the chart to show a timeseries for both{\" \"}\n              <span style={italics}>{metricsColumns[0]}</span> and{\" \"}\n              <span style={italics}>{metricsColumns[1]}</span> for given{\" \"}\n              <span style={italics}>{dimensionsColumns[0]}s</span> and{\" \"}\n              <span style={italics}>{dimensionsColumns[1]}s</span> - logical AND\n            </p>\n          </div>\n        </Bootstrap.Col>\n      </Bootstrap.Row>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport Highcharts from \"highcharts\";\n\nexport const generateChartOptions = (data, filter, apply) => {\n  // As input receives data, filter and condition whether to apply filter or not.\n  // Outputs options for HighchartsReact to display either filtered data or entire data set.\n  if (apply) {\n    return getChartData(\n      aggregate(filterArray(filter, data)).impressions,\n      aggregate(filterArray(filter, data)).clicks,\n      getChartTitle(filter)\n    );\n  } else {\n    return getChartData(\n      aggregate(data).impressions,\n      aggregate(data).clicks,\n      \"All Datasources; All Campaigns\"\n    );\n  }\n};\n\nconst filterArray = (filter, data) => {\n  // Receives data for filtering and filters in order to calculate subset of data which was filtered.\n  // Outputs filtered array.\n  if (!(Object.entries(filter).length === 0 && filter.constructor === Object)) {\n    if (filter.datasource === undefined || filter.datasource.length === 0) {\n      return data.filter(item => filter.campaign.includes(item.campaign));\n    } else if (filter.campaign === undefined || filter.campaign.length === 0) {\n      return data.filter(item => filter.datasource.includes(item.datasource));\n    } else {\n      return data.filter(\n        item =>\n          filter.datasource.includes(item.datasource) &&\n          filter.campaign.includes(item.campaign)\n      );\n    }\n  }\n};\n\nconst aggregate = array => {\n  // Receives an array of data as input and outputs an object of data aggregated per date.\n  // First key is data series for Highcharts of aggregated impressions.\n  // Second key is data series for Highcharts of aggregated clicks.\n  const groupByDate = _.groupBy(array, \"date\");\n  return {\n    impressions: {\n      type: \"line\",\n      name: \"Impressions\",\n      yAxis: 1,\n      data: generateChartAggregates(groupByDate, \"impressions\")\n    },\n    clicks: {\n      type: \"line\",\n      name: \"Clicks\",\n      data: generateChartAggregates(groupByDate, \"clicks\")\n    }\n  };\n};\n\nconst generateChartAggregates = (groupByDate, metric) =>\n  // As input receives dataset grouped by day and name of metric.\n  // Outputs array of unique dates and aggregated data of that metric.\n  Object.keys(groupByDate).map(item => {\n    const sum = groupByDate[item].reduce(\n      (accumulator, object) => accumulator + object[metric],\n      0\n    );\n    return [parseInt(item), sum];\n  });\n\nconst getChartTitle = filter => {\n  // Receives filter as input and generates corresponding message\n  if (filter[\"campaign\"] === undefined && filter[\"datasource\"] !== undefined) {\n    return \"Datasource \" + getTitleList(filter.datasource) + \"; All Campaigns\";\n  } else if (\n    filter[\"datasource\"] === undefined &&\n    filter[\"campaign\"] !== undefined\n  ) {\n    return \"All Datasources; Campaign \" + getTitleList(filter.campaign);\n  } else if (\n    filter[\"campaign\"] === undefined &&\n    filter[\"datasource\"] === undefined\n  ) {\n    return \"All Datasources; All Campaigns\";\n  } else {\n    return (\n      \"Datasource \" +\n      getTitleList(filter.datasource) +\n      \"; Campaign \" +\n      getTitleList(filter.campaign)\n    );\n  }\n};\n\nconst getTitleList = filterItem => {\n  // Receives an array of filter values. Generates a string of maximum 3 values\n  // if multiple filter values are selected.\n  const valuesArray = filterItem\n    .slice(0, 3)\n    .map(item => JSON.stringify(item) + \" and \");\n  if (filterItem.length <= 3) {\n    return valuesArray.join(\"\").slice(0, -4);\n  } else {\n    return valuesArray.join(\"\").slice(0, -5) + \", etc.\";\n  }\n};\n\nconst getChartData = (impressions, clicks, title) =>\n  // Recives series of impressions, series of clicks and title message for Highcharts as input.\n  // Outputs options to visualize data on a HighchartsReact component.\n  ({\n    chart: {\n      type: \"spline\",\n      zoomType: \"x\"\n    },\n    title: {\n      text: title,\n      align: \"left\"\n    },\n    xAxis: {\n      type: \"datetime\",\n      dateTimeLabelFormats: {\n        day: \"%e. %b\"\n      }\n    },\n    yAxis: [\n      {\n        // Primary yAxis\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        title: {\n          text: \"Clicks\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        opposite: false\n      },\n      {\n        // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n          text: \"Impressions\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        opposite: true\n      }\n    ],\n    legend: {\n      enabled: true\n    },\n    series: [clicks, impressions]\n  });\n","import * as React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport { generateChartOptions } from \"../functions/generateChartOptions\";\n\nexport const Chart = ({ coreData, filters, applyFilters, styling }) => (\n  // Defines a visualization components which will render a HighchartsReact component\n  // based on options generated from data and filters\n  <div data-testid=\"chart\">\n    <Bootstrap.Row>\n      <Bootstrap.Col sm={12}>\n        <h2 style={styling}>Chart</h2>\n      </Bootstrap.Col>\n    </Bootstrap.Row>\n    <HighchartsReact\n      highcharts={Highcharts}\n      options={generateChartOptions(coreData, filters, applyFilters)}\n    />\n  </div>\n);\n","import * as React from \"react\";\nimport * as SemanticUi from \"semantic-ui-react\";\n\nexport const Filters = ({ styling, filterColumns, onChange, dataSet }) => (\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  <div data-testid=\"filter\">\n    <h2 style={styling}>Filters</h2>\n    {filterColumns.map(item => (\n      <div key={item}>\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {item}\n        </p>\n        <SemanticUi.Dropdown\n          key={item}\n          placeholder={item}\n          fluid\n          multiple\n          selection\n          options={generateFilterOptions(item, dataSet)}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      </div>\n    ))}\n  </div>\n);\n\nexport const generateFilterOptions = (inputItem, inputDataSet) =>\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  [...new Set(inputDataSet.map(item => item[inputItem]))].map(item => ({\n    key: item,\n    text: item,\n    value: item\n  }));\n","import * as React from \"react\";\nimport \"./Button.css\";\n\nexport const Button = ({ onClick }) => (\n  // Defines a button Apply to apply selected filter options on Chart component\n  <button\n    data-testid=\"button\"\n    type=\"submit\"\n    style={{\n      backgroundColor: \"#8DA1B9\",\n      color: \"white\",\n      borderRadius: \"2px\",\n      width: \"80px\",\n      padding: \"5px 0px\",\n      position: \"left\",\n      marginTop: \"10px\"\n    }}\n  >\n    <span onClick={onClick}>Apply</span>\n  </button>\n);\n","import _ from \"lodash\";\n\nexport const parseData = csvData => {\n  const sortedData = sortArray(extractDate(formatMetrics(parseCsv(csvData))));\n  return {\n    sortedData: sortedData,\n    metrics: getMetrics(sortedData[0], getColumns(sortedData[0])),\n    dimensions: getDimensions(sortedData[0], getColumns(sortedData[0]))\n  };\n};\n\nconst parseCsv = csv => {\n  // Receives a comma separated csv file as input. Outputs array of objects as result.\n  const objectArray = csv.split(\"\\n\").map(item => ({\n    date: item.split(\",\")[0],\n    datasource: item.split(\",\")[1],\n    campaign: item.split(\",\")[2],\n    clicks: parseInt(item.split(\",\")[3]),\n    impressions: parseInt(item.split(\",\")[4])\n  }));\n  return objectArray.slice(1, objectArray.length - 1);\n};\n\nconst formatMetrics = input =>\n  // Receives an array of objects as inputs and substitutes empty or null impressions or clicks with 0.\n  input.map(row => {\n    if (!row.impressions) {\n      row.impressions = 0;\n    }\n    if (!row.clicks) {\n      row.clicks = 0;\n    }\n    return row;\n  });\n\nconst extractDate = input =>\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  input.map(row => {\n    const entry = { ...row };\n    entry.date = Date.parse(\n      row.date.slice(6, 10) +\n        \"-\" +\n        row.date.slice(3, 5) +\n        \"-\" +\n        row.date.slice(0, 2)\n    );\n    return entry;\n  });\n\nconst sortArray = input =>\n  // Receives an array of objects as input and sorts the entries based on Date, Datasource and Campaign as output.\n  _.sortBy(input, [\"date\", \"datasource\", \"campaign\"]);\n\nconst getColumns = input =>\n  // Receives an array of objects as input and outputs an array with unique keys (columns).\n  Object.keys(input);\n\nconst getMetrics = (inputData, inputColumns) =>\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  inputColumns.filter(\n    column => typeof inputData[column] === \"number\" && column !== \"date\"\n  );\n\nconst getDimensions = (inputData, inputColumns) =>\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  inputColumns.filter(column => typeof inputData[column] === \"string\");\n","export const handleClickHelper = selectedValues => {\n  // Function is triggered on every click on the Button Apply component.\n  // Sets useFilter state to true when the button Apply was clicked (unless filters are empty).\n  if (\n    !(\n      Object.entries(selectedValues).length === 0 &&\n      selectedValues.constructor === Object\n    )\n  ) {\n    return { applyFilter: true, filterValue: selectedValues };\n  } else {\n    return { applyFilter: false, filterValue: 0 };\n  }\n};\n","import * as React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as Bootstrap from \"react-bootstrap\";\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\nimport { Chart } from \"./components/Chart.js\";\nimport { Filters } from \"./components/Filters.js\";\nimport { Button } from \"./components/Button.js\";\nimport { parseData } from \"./functions/parseData\";\nimport { handleChangeHelper } from \"./functions/handleChangeHelper\";\nimport { handleClickHelper } from \"./functions/handleClickHelper\";\n\nconst App = () => {\n  const [data, setData] = React.useState([]);\n  const [metrics, setMetrics] = React.useState([]);\n  const [dimensions, setDimensions] = React.useState([]);\n  const [selectedValues, setSelectedValues] = React.useState({});\n  const [useFilters, setUseFilters] = React.useState(false);\n  const [filteredData, setFilteredData] = React.useState(0);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\n        // VERSION FOR PUBLISHING ON GH-PAGES:\n        //\"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"\n        \"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const rawData = parseData(await response.text());\n      setData(rawData.sortedData);\n      setMetrics(rawData.metrics);\n      setDimensions(rawData.dimensions);\n    };\n    fetchData();\n  }, []);\n\n  const styles = {\n    margin: \"30px 0px\",\n    textAlign: \"left\",\n    color: \"#8DA1B9\"\n  };\n\n  const handleChange = (event, data) => {\n    // Function is triggered on every change of Filter component. Receives information about event as input.\n    // Sets selectedValues state with information about which columns and their values were selected.\n    // Sets useFilter state to false when new filter was selected but button Apply was not yet clicked.\n    setSelectedValues(handleChangeHelper(event, data, selectedValues));\n  };\n  const handleClick = () => {\n    // Function is triggered on every click on the Button Apply component.\n    // Sets useFilter state to true when the button Apply was clicked (unless filters are empty).\n    setUseFilters(handleClickHelper(selectedValues).applyFilter);\n    setFilteredData(handleClickHelper(selectedValues).filterValue);\n  };\n  return (\n    <div className=\"App\" data-testid=\"app\">\n      <Bootstrap.Container>\n        <Header />\n        <Subheader dimensionsColumns={dimensions} metricsColumns={metrics} />\n        <Bootstrap.Row style={{ paddingLeft: \"15px\", paddingRight: \"15px\" }}>\n          <Bootstrap.Col sm={4} style={{ backgroundColor: \"#EFF2F1\" }}>\n            <Filters\n              styling={styles}\n              filterColumns={dimensions}\n              onChange={handleChange}\n              dataSet={data}\n            />\n            <Button onClick={handleClick} />\n          </Bootstrap.Col>\n          <Bootstrap.Col sm={8}>\n            <Chart\n              coreData={data}\n              filters={filteredData}\n              applyFilters={useFilters}\n              styling={styles}\n            />\n          </Bootstrap.Col>\n        </Bootstrap.Row>\n      </Bootstrap.Container>\n    </div>\n  );\n};\nexport default App;\n","export const handleChangeHelper = (event, data, selectedValues) => {\n  // Function is triggered on every change of Filter component. Receives information about event as input.\n  // Sets selectedValues state with information about which columns and their values were selected.\n  // Sets useFilter state to false when new filter was selected but button Apply was not yet clicked.\n  if (data.value === undefined || data.value.length === 0) {\n    if (data.placeholder === \"campaign\") {\n      const { campaign, ...newArray } = { ...selectedValues };\n      return newArray;\n    } else if (data.placeholder === \"datasource\") {\n      const { datasource, ...newArray } = { ...selectedValues };\n      return newArray;\n    }\n  } else {\n    return Object.assign(\n      { ...selectedValues },\n      {\n        [data.placeholder]: data.value\n      }\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}