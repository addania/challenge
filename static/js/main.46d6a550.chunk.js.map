{"version":3,"sources":["components/Header.js","components/List.js","components/Subheader.js","components/Chart.js","components/Filter.js","components/Button.js","components/TestData.js","App.js","serviceWorker.js","index.js"],"names":["Header","Row","Col","sm","style","margin","textAlign","color","borderBottom","paddingBottom","List","props","message","styling","columns","Subheader","italics","fontStyle","listItems","listItem","dimensionsColumns","length","push","key","fontSize","paddingLeft","metricsColumns","Chart","coreData","filters","applyFilters","onClick","generatedOptions","data","filter","apply","console","log","string","name","Object","keys","value","values","a","Datasource","b","Campaign","i","entries","constructor","undefined","filteredArray","_","includes","groupByDate","groupBy","uniqueDates","impressionsArray","clicksArray","dayEntry","totalImpressions","totalClicks","dataRow","uniqueFilterEntries","conditionsCheck","filterKey","Impressions","Clicks","filterItem","chart","type","xAxis","categories","yAxis","labels","format","Highcharts","getOptions","colors","title","text","opposite","gridLineWidth","align","series","generateOptions","backgroundColor","borderRadius","width","padding","position","marginTop","highcharts","options","Filter","filterColumns","onChange","dataSet","useState","styleLink","document","createElement","rel","href","head","appendChild","item","genOptions","Dropdown","placeholder","fluid","multiple","selection","inputItem","inputDataSet","uniqueValues","entry","newOptions","optionItem","optionRow","Button","TestData","setData","useEffect","async","axios","result","csvJSON","csv","lines","split","headers","obj","currentline","j","JSON","stringify","input","tableColumns","sortedData","sortBy","sortArray","row","formatImpressions","dataWithDate","oldDate","Date","year","slice","month","day","dateFormatted","formatDate","metrics","inputData","inputColumns","output","col","isNumber","getMetrics","dimensions","isString","getDimensions","isDate","getDates","App","selectedValues","setSelectedValues","useFilters","setUseFilters","styles","className","Container","e","newState","assign","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46d6a550.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function Header() {\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <h2\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#7F6A93\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Advertising Data ETL-V Challenge\n          </h2>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function List(props) {\n  return (\n    <li>\n      {props.message}\n      <span style={props.styling}>{props.columns}s</span>\n    </li>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { List } from \"./List.js\";\n\nexport function Subheader(props) {\n  const message = \"Select zero to N \";\n  //const columnsArray= [\"Datasources\", \"Campaigns\", \"Impressions\", \"Clicks\", \"Date\"];\n  const italics = { fontStyle: \"italic\" };\n\n  const listItems = [];\n  for (\n    let listItem = 0;\n    listItem < props.dimensionsColumns.length;\n    listItem++\n  ) {\n    listItems.push(\n      <List\n        message={message}\n        columns={props.dimensionsColumns[listItem]}\n        styling={italics}\n        key={listItem}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <div\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#828282\",\n              fontSize: \"15px\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            <ul style={{ paddingLeft: \"20px\" }}>{listItems}</ul>\n            <p style={{ fontSize: \"12px\" }}>[where zero means \"All\"]</p>\n            <p>\n              Hitting \"Apply\" filters the chart to show a timeseries for both{\" \"}\n              <span style={italics}>{props.metricsColumns[0]}</span> and{\" \"}\n              <span style={italics}>{props.metricsColumns[1]}</span> for given{\" \"}\n              <span style={italics}>{props.dimensionsColumns[0]}s</span> and{\" \"}\n              <span style={italics}>{props.dimensionsColumns[1]}s</span> -\n              logical AND\n            </p>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport _ from \"lodash\";\n\nexport function Chart({ coreData, filters, applyFilters, onClick, styling }) {\n  //console.log(coreData.Date);\n  //console.log(filters);\n  //console.log(applyFilters);\n  let generateCondition \n  let generatedOptions = generateOptions(coreData, filters, applyFilters);\n\n  //console.log(\"generatedOptions\", generatedOptions);\n\n  return (\n    <div>\n      <Row>\n        <Col sm={10}>\n          <h2 style={styling}>Chart</h2>\n        </Col>\n        <Col sm={2}>\n          <button\n            type=\"submit\"\n            style={{\n              backgroundColor: \"#8DA1B9\",\n              color: \"white\",\n              borderRadius: \"2px\",\n              width: \"80px\",\n              padding: \"5px 0px\",\n              position: \"left\",\n              marginTop: \"10px\",\n              position: \"absolute\",\n              right: 0,\n              bottom: 0\n            }}\n          >\n            <span onClick={onClick}>Reset</span>\n          </button>\n        </Col>\n      </Row>\n      <HighchartsReact highcharts={Highcharts} options={generatedOptions} />\n    </div>\n  );\n}\n\nfunction generateOptions(data, filter, apply) {\n  console.log(\"filter\", filter);\n  let string=\"\";\n\n    const name=Object.keys(filter);\n    const value=Object.values(filter);\n    console.log(\"name\", name, \"value\", value)\n    string=\".includes\"\n    const a=filter.Datasource;\n    console.log(\"a\", a)\n    const b=filter.Campaign;\n  for (let i=0;i<filter.length;i++){\n    string=string\n  }\n  //debugger;\n\n  if(!(Object.entries(filter).length === 0 && filter.constructor === Object)&&(a === undefined || a.length == 0)){\n  const filteredArray=_.filter(data, function(i) {\n    //debugger;\n    return b.includes(i.Campaign) });\n    console.log(\"filteredArray\",filteredArray);\n} else if(!(Object.entries(filter).length === 0 && filter.constructor === Object)&&(b === undefined || b.length == 0)){\n  const filteredArray=_.filter(data, function(i) {\n    //debugger;\n    return a.includes(i.Datasource) });\n    console.log(\"filteredArray\",filteredArray);\n } else if(!(Object.entries(filter).length === 0 && filter.constructor === Object)) {\n  const filteredArray=_.filter(data, function(i) {\n    //debugger;\n    return a.includes(i.Datasource) && b.includes(i.Campaign)  });\n  console.log(\"filteredArray\",filteredArray);\n }\n\n  let groupByDate = _.groupBy(data, \"Date\");\n  //console.log(\"filtere\", filter);\n  let uniqueDates = _.keys(groupByDate);\n  //console.log(\"uniqueDates\", uniqueDates);\n  let impressionsArray = [];\n  let clicksArray = [];\n  for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\n    let totalImpressions = 0;\n    let totalClicks = 0;\n    let message=\"All data\";\n    for (\n      let dataRow = 0;\n      dataRow < groupByDate[uniqueDates[dayEntry]].length;\n      dataRow++\n    ) {\n       //if(apply==true && !_.isEmpty(filter)){\n\n       if(apply==true){\n        //console.log(\"APPLY FILTEER\");\n        //console.log(\"filtr\", filter);\n        //groupByDate[uniqueDates[dayEntry]][dataRow]\n        let uniqueFilterEntries=_.keys(filter);\n        //console.log(\"uniqueFilterEntries\", uniqueFilterEntries);\n        \n        let conditionsCheck=[];\n        \n        for (let filterKey=0;filterKey<uniqueFilterEntries.length;filterKey++){\n      \n          if (filter[uniqueFilterEntries[filterKey]].includes(groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]])){\n            \n            conditionsCheck.push(true)\n            //console.log(filter[uniqueFilterEntries[filterKey]], \" includes \", groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]] )\n          } else{\n            conditionsCheck.push(false);\n          }\n\n        }\n        //console.log(\"conditionsCheck\", conditionsCheck);\n\n        if (!conditionsCheck.includes(false)){\n          totalImpressions =\n          totalImpressions +\n          groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n          totalClicks =\n          totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n\n        }\n\n      } else {\n\n        \n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n        let uniqueFilterEntries=_.keys(filter);\n        for (let filterItem=0;filterItem<filter.length;filterItem++){\n          debugger;\n          message=message + filter[uniqueFilterEntries[filterItem]];\n          //console.log(\"message\", message);\n        }\n         //console.log(\"message\", message);\n      }\n\n\n\n      /*if(apply==true){\n        //console.log(\"APPLY FILTEER\");\n        console.log(\"filtr\", filter);\n        //groupByDate[uniqueDates[dayEntry]][dataRow]\n        let uniqueFilterEntries=_.keys(filter);\n        console.log(\"uniqueFilterEntries\", uniqueFilterEntries);\n        let condition=\"\";\n        \n        for (let filterKey=0;filterKey<uniqueFilterEntries.length;filterKey++){\n           condition=condition+filter[uniqueFilterEntries[filterKey]].includes(groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]]+ \"&&\"\n          if (filter[uniqueFilterEntries[filterKey]].includes(groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]])){\n            console.log(filter[uniqueFilterEntries[filterKey]], \" includes \", groupByDate[uniqueDates[dayEntry]][dataRow][uniqueFilterEntries[filterKey]] )\n          }\n        }\n      } else{\n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n      }*/\n    }\n    impressionsArray.push(totalImpressions);\n    clicksArray.push(totalClicks);\n  }\n  //console.log(\"impressionsArray\", impressionsArray);\n  //console.log(\"clicksArray\", clicksArray);\n\n  let groupByCampaign = _.groupBy(data, \"Campaign\");\n  //console.log(\"groupByCampaign\", groupByCampaign);\n\n  let groupByDatasource = _.groupBy(data, \"Datasource\");\n  //console.log(\"groupByDatasource\", groupByDatasource);\n\n  const options = {\n    chart: {\n      type: \"spline\"\n    },\n    xAxis: {\n      categories: uniqueDates\n    },\n    yAxis: [\n      {\n        // Primary yAxis\n        labels: {\n          format: \"{value}\",\n\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        title: {\n          text: \"Clicks\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        opposite: false\n      },\n      {\n        // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n          text: \"Impressions\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        opposite: true\n      }\n    ],\n\n    title: {\n      text: \"Datasources\",\n      align: \"left\"\n    },\n    series: [\n      {\n        name: \"Clicks\",\n\n        data: clicksArray\n      },\n\n      {\n        name: \"Impressions\",\n        yAxis: 1,\n\n        data: impressionsArray\n      }\n    ]\n  };\n\n  return options;\n}\n","import React, { useState } from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\n  const [selectedValues, setSelectedValues] = useState();\n  //console.log(\"filterColumns\", filterColumns);\n  const columns = [];\n\n  /*for(let item=0;item<filterColumns.length;item++ ){\n    //debugger;\n    columns.push(<button key={item} name={filterColumns[item]} onClick={()=>onclick(filterColumns[item])}>{filterColumns[item]}</button>)\n    console.log(\"columns\", columns);\n  };\n  console.log(\"columns\", columns);*/\n\n  /*const options = [\n  { key: 'angular', text: 'Angular', value: 'angular', name: \"Angular\"},\n  { key: 'css', text: 'CSS', value: 'css' },\n  { key: 'design', text: 'Graphic Design', value: 'design' },\n  { key: 'ember', text: 'Ember', value: 'ember' },\n  { key: 'html', text: 'HTML', value: 'html' },\n  { key: 'ia', text: 'Information Architecture', value: 'ia' },\n  { key: 'javascript', text: 'Javascript', value: 'javascript' },\n  { key: 'mech', text: 'Mechanical Engineering', value: 'mech' },\n  { key: 'meteor', text: 'Meteor', value: 'meteor' },\n  { key: 'node', text: 'NodeJS', value: 'node' },\n  { key: 'plumbing', text: 'Plumbing', value: 'plumbing' },\n  { key: 'python', text: 'Python', value: 'python' },\n  { key: 'rails', text: 'Rails', value: 'rails' },\n  { key: 'react', text: 'React', value: 'react' },\n  { key: 'repair', text: 'Kitchen Repair', value: 'repair' },\n  { key: 'ruby', text: 'Ruby', value: 'ruby' },\n  { key: 'ui', text: 'UI Design', value: 'ui' },\n  { key: 'ux', text: 'User Experience', value: 'ux' },\n];*/\n\n  const styleLink = document.createElement(\"link\");\n  styleLink.rel = \"stylesheet\";\n  styleLink.href =\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n  document.head.appendChild(styleLink);\n\n  /*function handleChange(e, data){\n  setSelectedValues(data.value);\n  console.log(data.value)\n}**/\n\n  for (let item = 0; item < filterColumns.length; item++) {\n    //debugger;\n    const generatedOptions = [];\n    const genOptions = generateOptions(filterColumns[item], dataSet);\n    //console.log(\"genOptions\", genOptions);\n    columns.push(\n      <div>\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {filterColumns[item]}\n        </p>\n        <Dropdown\n          style={styleLink}\n          placeholder={filterColumns[item]}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      </div>\n    );\n    //console.log(\"columns\", columns);\n  }\n  //console.log(\"columns\", columns);\n\n  return (\n    <div>\n      <h2 style={styling}>Filters</h2>\n      {columns}\n\n      {/* <Dropdown style={styleLink} placeholder='Skills' fluid multiple selection options={options} onChange={onChange} />\n       */}\n    </div>\n  );\n}\n\nfunction generateOptions(inputItem, inputDataSet) {\n  let uniqueValues = [];\n  for (let entry = 0; entry < inputDataSet.length; entry++) {\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\n      uniqueValues.push(inputDataSet[entry][inputItem]);\n      //console.log(\"uniqueValues\", uniqueValues);\n    }\n  }\n  let newOptions = [];\n  for (let optionItem = 0; optionItem < uniqueValues.length; optionItem++) {\n    let optionRow = {\n      key: uniqueValues[optionItem],\n      text: uniqueValues[optionItem],\n      value: uniqueValues[optionItem]\n    };\n    newOptions.push(optionRow);\n    //console.log(\"optionRow\", optionRow);\n  }\n  //console.log(\"newOptions\", newOptions)\n  return newOptions;\n}\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport function Button({ onClick }) {\n  return (\n    <button\n      type=\"submit\"\n      style={{\n        backgroundColor: \"#8DA1B9\",\n        color: \"white\",\n        borderRadius: \"2px\",\n        width: \"80px\",\n        padding: \"5px 0px\",\n        position: \"left\",\n        marginTop: \"10px\"\n      }}\n    >\n      <span onClick={onClick}>Apply</span>\n    </button>\n  );\n}\n","import React, {useState, useEffect} from \"react\";\nimport axios from 'axios';\n\n\n\nexport function TestData(props) {\n  const [data, setData]=useState();\n\n  /*fetch('http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv')\n      .then(response => response.json())\n      .then(data => setData({ data }));*/\n\n   useEffect(async () => {\n    const result = await axios(\n      'http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv',\n    );\n    setData(csvJSON(result.data));\n  }, []);\n\n  //console.log(data);\n  \n  //console.log(typeof data);\n\n  //const output=csvJSON(data);\n  //console.log(JSON.stringify(output));\n\n  return (\n    <h1>\n      hi\n    </h1>\n  );\n}\n\nfunction csvJSON(csv){\n\n  var lines=csv.split(\"\\n\");\n\n  var result = [];\n\n  // NOTE: If your columns contain commas in their values, you'll need\n  // to deal with those before doing the next step \n  // (you might convert them to &&& or something, then covert them back later)\n  // jsfiddle showing the issue https://jsfiddle.net/\n  var headers=lines[0].split(\",\");\n\n  for(var i=1;i<lines.length;i++){\n\n      var obj = {};\n      var currentline=lines[i].split(\",\");\n\n      for(var j=0;j<headers.length;j++){\n          obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n\n  }\n\n  //return result; //JavaScript object\n  return JSON.stringify(result); //JSON\n}","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\n//import Multiselect from 'react-bootstrap-multiselect';\nimport { Chart } from \"./components/Chart.js\";\nimport { Filter } from \"./components/Filter.js\";\nimport { Button } from \"./components/Button.js\";\nimport { TestData } from \"./components/TestData.js\";\nimport _ from \"lodash\";\nimport dataSet from \"./data/data2.json\";\n\n\n  const tableColumns = getColumns(dataSet);\n\n  //console.log(\"tableColumns\", tableColumns);\n\n  const dataWithDateFormat = formatDate(dataSet);\n\n  const formattedImpressions=formatImpressions(dataWithDateFormat);\n  //console.log(\"dataWithDateFormat\", dataWithDateFormat);\n  const sortedData = sortArray(formattedImpressions);\n  //console.log(\"sorted data\", sortedData);\n\n  const metrics = getMetrics(sortedData, tableColumns);\n  //console.log(\"metrics\", metrics);\n  const dimensions = getDimensions(sortedData, tableColumns);\n  //console.log(\"dimension\", dimensions);\n  const dates = getDates(sortedData, tableColumns);\n  //console.log(\"dates\", dates);\n\n\nfunction App() {\n  const [data, setData] = useState(sortedData);\n\n\n\n  /*\n  const [data, setData] = useState([ \n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"B2B - Leads\",\n      AdGroup: \"A\",\n      Clicks: 7,\n      Impressions: 444\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"B\",\n      Clicks: 16,\n      Impressions: 12535\n    },\n    {\n      Date: \"20.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"A\",\n      Clicks: 250,\n      Impressions: 10535\n    }\n  ]);\n  */\n  /*\n  const [data, setData] = useState([\n    {\n      Date: \"23.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Like Ads\",\n      AdGroup: \"A\",\n      Clicks: 274,\n      Impressions: 1979\n    },\n    {\n      Date: \"08.02.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Like Ads\",\n      AdGroup: \"A\",\n      Clicks: 274,\n      Impressions: 1979\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Like Ads\",\n      AdGroup: \"A\",\n      Clicks: 274,\n      Impressions: 1979\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"B2B - Leads\",\n      AdGroup: \"A\",\n      Clicks: 7,\n      Impressions: 444\n    },\n    {\n      Date: \"01.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"B\",\n      Clicks: 16,\n      Impressions: 12535\n    },\n    {\n      Date: \"20.01.2019\",\n      Datasource: \"Google Adwords\",\n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\",\n      AdGroup: \"A\",\n      Clicks: 250,\n      Impressions: 10535\n    },\n    {\n      Date: \"01.03.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.04.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.05.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.06.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.07.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.08.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.09.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.10.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.11.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    },\n    {\n      Date: \"01.12.2019\",\n      Datasource: \"Facebook Ads\",\n      Campaign: \"Offer Campaigns - Conversions\",\n      AdGroup: \"A\",\n      Clicks: 245,\n      Impressions: 764627\n    }\n  ]);\n  */\n  const [selectedColumns, setColumns] = useState([]);\n  /*const [selectedValues, setSelectedValues] = useState([]);\n  const [selectedValues2, setSelectedValues2] = useState([]);*/\n  const [selectedValues, setSelectedValues] = useState({});\n  const [useFilters, setUseFilters] = useState(false);\n\n  const styles = {\n    margin: \"30px 0px\",\n    textAlign: \"left\",\n    color: \"#8DA1B9\"\n  };\n\n  //console.log(JSON.stringify(data));\n\n  \n\n  //const dataMulti = [{ value:'One', selected:true }, { value: 'Two' }, { value:'Three' }]\n\n  function handleChange(e, data) {\n    //console.log(\"e\", e);\n    //console.log(\"data\", data);\n    //console.log(\"data/placeholder\", data.placeholder);\n    /*if (data.placeholder ==\"Datasource\"){\n      setSelectedValues(data.value);\n    } else if (data.placeholder ==\"Campaign\"){\n      setSelectedValues2(data.value);\n    }*/\n    //console.log(\"data.value\", data.value);\n    setUseFilters(false);\n    if (data.value === undefined || data.value == 0){\n      //debugger;\n      let newState = { ...selectedValues };\n      delete newState[data.placeholder];\n      setSelectedValues(newState);\n\n    } else {\n\n\n    let newState = { ...selectedValues };\n    let key = data.placeholder;\n\n    newState = Object.assign(newState, { [key]: data.value });\n    setSelectedValues(newState);\n\n   // setUseFilters(false);\n    //console.log (\"selectedValues\", selectedValues);\n\n    //console.log(\"newState\", newState);\n    \n    }\n    \n\n  }\n  function handleClick() {\n    let newState = true;\n    setUseFilters(newState);\n   // setSelectedValues({});\n  }\n\n  function handleReset() {\n    let newState = false;\n    setUseFilters(newState);\n    //setSelectedValues({});\n  }\n  //console.log(\"useFilters\", useFilters);\n\n  /*const testDates = [\n    sortedData[0].Date,\n    sortedData[1].Date,\n    sortedData[2].Date,\n    sortedData[3].Date,\n    sortedData[4].Date\n  ];*/\n\n  //console.log(\"selected values\", selectedValues);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Subheader dimensionsColumns={dimensions} metricsColumns={metrics} />\n        <Row>\n          <Col sm={4} style={{ backgroundColor: \"#EFF2F1\" }}>\n            <Filter\n              styling={styles}\n              filterColumns={dimensions}\n              onChange={handleChange}\n              dataSet={sortedData}\n            />\n            <Button onClick={handleClick} />\n            \n          </Col>\n          <Col sm={8}>\n            <Chart\n              coreData={sortedData}\n              filters={selectedValues}\n              applyFilters={useFilters}\n              onClick={handleReset}\n              styling={styles}\n            />\n          </Col>\n        </Row>\n        <TestData/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction formatImpressions(input) {\n  for (let row = 0; row < input.length; row++) {\n\n    if(!input[row].Impressions){\n                input[row].Impressions=0;\n                //console.log(\"row\", row, \"impressions\", input[row].Impressions, \"typeof\", typeof input[row].Impressions);\n             }\n    if(!input[row].Clicks){\n                input[row].Clicks=0;\n                //console.log(input[row].Clicks);\n             }\n  }\n return input\n}\n\nfunction formatDate(input) {\n\n  const dataWithDate = [];\n\n  for (let row = 0; row < input.length; row++) {\n    const entry = { ...input[row] };\n\n  \n\n\n    //console.log(\"entry\", entry)\n    const oldDate = input[row].Date;\n    //console.log(oldDate);\n    const year = oldDate.slice(6, 10);\n    //console.log(\"year\", year);\n    const month = oldDate.slice(3, 5);\n    //console.log(\"month\", month);\n    const day = oldDate.slice(0, 2);\n    //console.log(\"day\", day);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    //console.log(\"newDate\", newDate);\n    const dateFormatted = new Date(newDate);\n    //console.log(\"dateFormatted\",dateFormatted);\n    entry.Date = dateFormatted;\n    //console.log(\"entryPOST\", entry);\n    dataWithDate.push(entry);\n  }\n  //console.log(\"dataWithDate\", dataWithDate);\n  //const output=_.sortBy(dataWithDate, [\"Date\", \"Datasource\", \"Campaign\"]);\n\n  //console.log(\"dat OUTPUT\", output);\n  return dataWithDate;\n}\n\nfunction sortArray(input) {\n  const output = _.sortBy(input, [\"Date\", \"Datasource\"]);\n  return output;\n}\n\nfunction getColumns(input) {\n  const output = Object.keys(input[0]);\n  return output;\n}\n\nfunction getDimensions(inputData, inputColumns) {\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    //debugger;\n    const col = inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isString(inputData[0][col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\nfunction getDates(inputData, inputColumns) {\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    //debugger;\n    const col = inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isDate(inputData[0][col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n\nfunction getMetrics(inputData, inputColumns) {\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    //debugger;\n    const col = inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isNumber(inputData[0][col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}