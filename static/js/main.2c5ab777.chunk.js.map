{"version":3,"sources":["components/Header.js","components/List.js","components/Subheader.js","components/Chart.js","components/Filter.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Header","Row","Col","sm","style","margin","textAlign","color","borderBottom","paddingBottom","List","props","message","styling","columns","Subheader","italics","fontStyle","listItems","listItem","dimensionsColumns","length","push","key","fontSize","paddingLeft","metricsColumns","Chart","coreData","filters","applyFilters","onClick","calculatedOptions","data","filter","apply","aggregatedImpressions","aggregatedClicks","aggregatedDates","aggregatedData","calculateAggregates","filtering","dataForFiltering","filteredDatasources","Datasource","filteredCampaigns","Campaign","filteredArray","Object","entries","constructor","undefined","_","i","includes","filterArray","filterForMessage","datasourceMessage","campaignMessage","console","log","datasourcesList","generateList","campaignsList","generateMessage","impressionsForOptions","clicksForOptions","datesForOptions","messageForOptions","chart","type","xAxis","categories","yAxis","labels","format","Highcharts","getOptions","colors","title","text","opposite","gridLineWidth","align","series","name","calculateOptions","backgroundColor","borderRadius","width","padding","marginTop","position","right","bottom","highcharts","options","array","groupByDate","groupBy","uniqueDates","keys","impressionsArray","clicksArray","dayEntry","totalImpressions","totalClicks","dataRow","Impressions","Clicks","filterItem","string","entry","JSON","stringify","slice","Filter","filterColumns","onChange","dataSet","styleLink","document","createElement","rel","href","head","appendChild","item","genOptions","generateOptions","Dropdown","placeholder","fluid","multiple","selection","inputItem","inputDataSet","uniqueValues","newOptions","optionItem","optionRow","value","Button","moment","require","App","useState","setData","metrics","setMetrics","dimensions","setDimensions","setDates","selectedValues","setSelectedValues","useFilters","setUseFilters","useEffect","a","async","fetch","response","csvData","jsonData","csvJSON","formattedImpressions","formatImpressions","formattedDates","extractDate","sortedData","sortArray","tableColumns","getColumns","metricColumns","getMetrics","dimensionColumns","getDimensions","dateColumns","getDates","finalData","formatDate","fetchData","styles","className","Container","paddingRight","e","newState","assign","csv","lines","split","result","headers","obj","currentline","j","columnValue","parseInt","pop","input","row","dataWithDate","oldDate","Date","year","month","day","dateFormatted","sortBy","inputData","inputColumns","output","col","isNumber","isString","isDate","formattedDateArray","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c5ab777.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function Header() {\n  // Defines a header to be displayed as a title on the pages\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <h2\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#7F6A93\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Advertising Data ETL-V Challenge\n          </h2>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function List(props) {\n  // Defines a list component to be used in Subheader component\n  return (\n    <li>\n      {props.message}\n      <span style={props.styling}>{props.columns}s</span>\n    </li>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { List } from \"./List.js\";\n\nexport function Subheader(props) {\n  // Defines a component Subheaher with more information about the application.\n  const message = \"Select zero to N \";\n  const italics = { fontStyle: \"italic\" };\n  const listItems = [];\n  for (\n    let listItem = 0;\n    listItem < props.dimensionsColumns.length;\n    listItem++\n  ) {\n    listItems.push(\n      <List\n        message={message}\n        columns={props.dimensionsColumns[listItem]}\n        styling={italics}\n        key={listItem}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col sm={12}>\n          <div\n            style={{\n              margin: \"20px 0px\",\n              textAlign: \"left\",\n              color: \"#828282\",\n              fontSize: \"15px\",\n              borderBottom: \"0.5px solid #E8E8EA\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            <ul style={{ paddingLeft: \"20px\" }}>{listItems}</ul>\n            <p style={{ fontSize: \"12px\" }}>[where zero means \"All\"]</p>\n            <p>\n              Hitting \"Apply\" filters the chart to show a timeseries for both{\" \"}\n              <span style={italics}>{props.metricsColumns[0]}</span> and{\" \"}\n              <span style={italics}>{props.metricsColumns[1]}</span> for given{\" \"}\n              <span style={italics}>{props.dimensionsColumns[0]}s</span> and{\" \"}\n              <span style={italics}>{props.dimensionsColumns[1]}s</span> -\n              logical AND\n            </p>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from \"react\";\nimport _ from \"lodash\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport function Chart({ coreData, filters, applyFilters, onClick, styling }) {\n  // Defines a visualization components which will render a HighchartsReact component\n  // based on options generated from data and filters\n  let calculatedOptions = calculateOptions(coreData, filters, applyFilters);\n\n  return (\n    <div>\n      <Row>\n        <Col sm={10}>\n          <h2 style={styling}>Chart</h2>\n        </Col>\n        <Col sm={2}>\n          <button\n            type=\"submit\"\n            style={{\n              backgroundColor: \"#8DA1B9\",\n              color: \"white\",\n              borderRadius: \"2px\",\n              width: \"80px\",\n              padding: \"5px 0px\",\n              marginTop: \"10px\",\n              position: \"absolute\",\n              right: 0,\n              bottom: 0\n            }}\n          >\n            <span onClick={onClick}>Reset</span>\n          </button>\n        </Col>\n      </Row>\n      <HighchartsReact highcharts={Highcharts} options={calculatedOptions} />\n    </div>\n  );\n}\n\nfunction calculateOptions(data, filter, apply) {\n  // As input receives data, filter and condition whether to apply filter or not.\n  // Outputs options for HighchartsReact to display either filtered data or entire data set.\n  let aggregatedImpressions;\n  let aggregatedClicks;\n  let aggregatedDates;\n  let message = \"\";\n  if (apply) {\n    const arrayAfterFiltering = filterArray(filter, data);\n    const aggregatedData = calculateAggregates(arrayAfterFiltering);\n    aggregatedImpressions = aggregatedData[0];\n    aggregatedClicks = aggregatedData[1];\n    aggregatedDates = aggregatedData[2];\n    message = generateMessage(filter);\n  } else {\n    const aggregatedData = calculateAggregates(data);\n    aggregatedImpressions = aggregatedData[0];\n    aggregatedClicks = aggregatedData[1];\n    aggregatedDates = aggregatedData[2];\n    message = \"All Datasources; All Campaigns\";\n  }\n  const optionsFilteredData = generateOptions(\n    aggregatedImpressions,\n    aggregatedClicks,\n    aggregatedDates,\n    message\n  );\n  return optionsFilteredData;\n}\n\nfunction filterArray(filtering, dataForFiltering) {\n  // Receives data for filtering and filters in order to calculate subset of data which was filtered.\n  // Outputs filtered array.\n  const filteredDatasources = filtering.Datasource;\n  const filteredCampaigns = filtering.Campaign;\n  let filteredArray = [];\n  if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    ) &&\n    (filteredDatasources === undefined || filteredDatasources.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return filteredCampaigns.includes(i.Campaign);\n    });\n  } else if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    ) &&\n    (filteredCampaigns === undefined || filteredCampaigns.length == 0)\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return filteredDatasources.includes(i.Datasource);\n    });\n  } else if (\n    !(\n      Object.entries(filtering).length === 0 && filtering.constructor === Object\n    )\n  ) {\n    filteredArray = _.filter(dataForFiltering, function(i) {\n      return (\n        filteredDatasources.includes(i.Datasource) &&\n        filteredCampaigns.includes(i.Campaign)\n      );\n    });\n  }\n  return filteredArray;\n}\n\nfunction calculateAggregates(array) {\n  // Receives an array of data as input and outputs an array of data aggregated per date.\n  // First element of the output array is array of aggregated impressions.\n  // Second element of the output array is array of aggregated clicks.\n  // Third element of the output array is array of unique dates.\n  let groupByDate = _.groupBy(array, \"Date\");\n  let uniqueDates = _.keys(groupByDate);\n  let impressionsArray = [];\n  let clicksArray = [];\n\n  for (let dayEntry = 0; dayEntry < uniqueDates.length; dayEntry++) {\n    let totalImpressions = 0;\n    let totalClicks = 0;\n\n    for (\n      let dataRow = 0;\n      dataRow < groupByDate[uniqueDates[dayEntry]].length;\n      dataRow++\n    ) {\n      totalImpressions =\n        totalImpressions +\n        groupByDate[uniqueDates[dayEntry]][dataRow].Impressions;\n      totalClicks =\n        totalClicks + groupByDate[uniqueDates[dayEntry]][dataRow].Clicks;\n    }\n    impressionsArray.push(totalImpressions);\n    clicksArray.push(totalClicks);\n  }\n  return [impressionsArray, clicksArray, uniqueDates];\n}\n\nfunction generateOptions(\n  impressionsForOptions,\n  clicksForOptions,\n  datesForOptions,\n  messageForOptions\n) {\n  // Recives array of impressions, array of clicks and array of unique dates as input.\n  // Outputs options to visualize data on a HighchartsReact component.\n  const options = {\n    chart: {\n      type: \"spline\"\n    },\n    xAxis: {\n      categories: datesForOptions\n    },\n    yAxis: [\n      {\n        // Primary yAxis\n        labels: {\n          format: \"{value}\",\n\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        title: {\n          text: \"Clicks\",\n          style: {\n            color: Highcharts.getOptions().colors[0]\n          }\n        },\n        opposite: false\n      },\n      {\n        // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n          text: \"Impressions\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        labels: {\n          format: \"{value}\",\n          style: {\n            color: Highcharts.getOptions().colors[1]\n          }\n        },\n        opposite: true\n      }\n    ],\n\n    title: {\n      text: messageForOptions,\n      align: \"left\"\n    },\n    series: [\n      {\n        name: \"Clicks\",\n\n        data: clicksForOptions\n      },\n\n      {\n        name: \"Impressions\",\n        yAxis: 1,\n\n        data: impressionsForOptions\n      }\n    ]\n  };\n  return options;\n}\n\nfunction generateMessage(filterForMessage) {\n  // Receives filter as input and generates corresponding message\n  let filterMessage = \"\";\n  let datasourceMessage = \"\";\n  let campaignMessage = \"\";\n  console.log(\"FilterForMessage\");\n  if (\n    filterForMessage[\"Campaign\"] == undefined &&\n    filterForMessage[\"Datasource\"] != undefined\n  ) {\n    campaignMessage = \"All Campaigns\";\n    let datasourcesList = generateList(filterForMessage.Datasource);\n    datasourceMessage = \"Datasource \" + datasourcesList;\n  } else if (\n    filterForMessage[\"Datasource\"] == undefined &&\n    filterForMessage[\"Campaign\"] != undefined\n  ) {\n    datasourceMessage = \"All Datasources\";\n    let campaignsList = generateList(filterForMessage.Campaign);\n    campaignMessage = \"Campaign \" + campaignsList;\n  } else if (\n    filterForMessage[\"Campaign\"] == undefined &&\n    filterForMessage[\"Datasource\"] == undefined\n  ) {\n    datasourceMessage = \"All Datasources \";\n    campaignMessage = \"All Campaigns\";\n  } else {\n    let datasourcesList = generateList(filterForMessage.Datasource);\n    let campaignsList = generateList(filterForMessage.Campaign);\n    datasourceMessage = \"Datasource \" + datasourcesList;\n    campaignMessage = \"Campaign \" + campaignsList;\n  }\n  filterMessage = datasourceMessage + \"; \" + campaignMessage;\n  return filterMessage;\n}\n\nfunction generateList(filterItem) {\n  // Receives an array of filter values. Generates a string of maximum 3 values\n  // if multiple filter values are selected.\n  let string = \"\";\n  let newString;\n  for (let entry = 0; entry < filterItem.length && entry < 3; entry++) {\n    string = string + JSON.stringify(filterItem[entry]) + \" and \";\n  }\n\n  if (filterItem.length <= 3) {\n    newString = string.slice(0, -4);\n  } else {\n    newString = string.slice(0, -5) + \", etc.\";\n  }\n  return newString;\n}\n","import React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport function Filter({ styling, filterColumns, onChange, dataSet }) {\n  // Defines a filter which allows users to filter data displayed on graph\n  // by selecting certain datasources and/or campaigns.\n  const columns = [];\n  const styleLink = document.createElement(\"link\");\n  styleLink.rel = \"stylesheet\";\n  styleLink.href =\n    \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\n  document.head.appendChild(styleLink);\n\n  for (let item = 0; item < filterColumns.length; item++) {\n    const genOptions = generateOptions(filterColumns[item], dataSet);\n    columns.push(\n      <div key={item}>\n        <p style={{ textAlign: \"left\", color: \"#828282\", marginTop: \"20px\" }}>\n          {filterColumns[item]}\n        </p>\n        <Dropdown\n          key={item}\n          style={styleLink}\n          placeholder={filterColumns[item]}\n          fluid\n          multiple\n          selection\n          options={genOptions}\n          onChange={onChange}\n          style={{ marginTop: \"5px\" }}\n        />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h2 style={styling}>Filters</h2>\n      {columns}\n    </div>\n  );\n}\n\nfunction generateOptions(inputItem, inputDataSet) {\n  // Receives input data and input item (based on filters) and dynamically generated options to be used for Dropdown component.\n  let uniqueValues = [];\n  for (let entry = 0; entry < inputDataSet.length; entry++) {\n    if (!uniqueValues.includes(inputDataSet[entry][inputItem])) {\n      uniqueValues.push(inputDataSet[entry][inputItem]);\n    }\n  }\n  let newOptions = [];\n  for (let optionItem = 0; optionItem < uniqueValues.length; optionItem++) {\n    let optionRow = {\n      key: uniqueValues[optionItem],\n      text: uniqueValues[optionItem],\n      value: uniqueValues[optionItem]\n    };\n    newOptions.push(optionRow);\n  }\n  return newOptions;\n}\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport function Button({ onClick }) {\n  // Defines a button Apply to apply selected filter options on Chart component\n  return (\n    <button\n      type=\"submit\"\n      style={{\n        backgroundColor: \"#8DA1B9\",\n        color: \"white\",\n        borderRadius: \"2px\",\n        width: \"80px\",\n        padding: \"5px 0px\",\n        position: \"left\",\n        marginTop: \"10px\"\n      }}\n    >\n      <span onClick={onClick}>Apply</span>\n    </button>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport _ from \"lodash\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Container } from \"react-bootstrap\";\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\nimport { Chart } from \"./components/Chart.js\";\nimport { Filter } from \"./components/Filter.js\";\nimport { Button } from \"./components/Button.js\";\n\nconst moment = require(\"moment\");\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [metrics, setMetrics] = useState([]);\n  const [dimensions, setDimensions] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [selectedValues, setSelectedValues] = useState({});\n  const [useFilters, setUseFilters] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        // VERSION FOR PUBLISHING ON GH-PAGES:\n        \"https://raw.githubusercontent.com/addania/challenge/master/src/data/source.csv?raw=true\"\n        //\"http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv\"\n      );\n      const csvData = await response.text();\n      const jsonData = csvJSON(csvData);\n      const formattedImpressions = formatImpressions(jsonData);\n      const formattedDates = extractDate(formattedImpressions);\n      const sortedData = sortArray(formattedDates);\n      const tableColumns = getColumns(sortedData[0]);\n      const metricColumns = getMetrics(sortedData[0], tableColumns);\n      const dimensionColumns = getDimensions(sortedData[0], tableColumns);\n      const dateColumns = getDates(sortedData[0], tableColumns);\n      const finalData = formatDate(sortedData);\n      setData(finalData);\n      setMetrics(metricColumns);\n      setDimensions(dimensionColumns);\n      setDates(dateColumns);\n    }\n    fetchData();\n  }, []);\n\n  const styles = {\n    margin: \"30px 0px\",\n    textAlign: \"left\",\n    color: \"#8DA1B9\"\n  };\n\n  function handleChange(e, data) {\n    // Function is triggered on every change of Filter component. Receives information about event as input.\n    // Sets selectedValues state with information about which columns and their values were selected.\n    // Sets useFilter state to false when new filter was selected but button Apply was not yet clicked.\n    setUseFilters(false);\n    if (data.value === undefined || data.value == 0) {\n      let newState = { ...selectedValues };\n      delete newState[data.placeholder];\n      setSelectedValues(newState);\n    } else {\n      let newState = { ...selectedValues };\n      let key = data.placeholder;\n      newState = Object.assign(newState, { [key]: data.value });\n      setSelectedValues(newState);\n    }\n  }\n  function handleClick() {\n    // Function is triggered on every click on the Button Apply component.\n    // Sets useFilter state to true when the button Apply was clicked (unless filters are empty).\n    if (\n      !(\n        Object.entries(selectedValues).length === 0 &&\n        selectedValues.constructor === Object\n      )\n    ) {\n      let newState = true;\n      setUseFilters(newState);\n    }\n  }\n\n  function handleReset() {\n    // Function is triggered on every click on the Reset button in Chart component.\n    // Sets useFilter state to false when the button Reset was clicked.\n    let newState = false;\n    setUseFilters(newState);\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Subheader dimensionsColumns={dimensions} metricsColumns={metrics} />\n        <Row style={{ paddingLeft: \"15px\", paddingRight: \"15px\" }}>\n          <Col sm={4} style={{ backgroundColor: \"#EFF2F1\" }}>\n            <Filter\n              styling={styles}\n              filterColumns={dimensions}\n              onChange={handleChange}\n              dataSet={data}\n            />\n            <Button onClick={handleClick} />\n          </Col>\n          <Col sm={8}>\n            <Chart\n              coreData={data}\n              filters={selectedValues}\n              applyFilters={useFilters}\n              onClick={handleReset}\n              styling={styles}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction csvJSON(csv) {\n  // Receives a comma separated csv file as input. Outputs array of objects as result.\n  var lines = csv.split(\"\\n\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n    for (var j = 0; j < headers.length; j++) {\n      const columnValue = currentline[j];\n      if (j === 3 || j === 4) {\n        obj[headers[j]] = parseInt(columnValue);\n      } else {\n        obj[headers[j]] = columnValue;\n      }\n    }\n    result.push(obj);\n  }\n  let removeLast = result.pop();\n  return result;\n}\n\nfunction formatImpressions(input) {\n  // Receives an array of objects as inputs and substitutes empty or null impressions with 0.\n  for (let row = 0; row < input.length; row++) {\n    if (!input[row].Impressions) {\n      input[row].Impressions = 0;\n    }\n    if (!input[row].Clicks) {\n      input[row].Clicks = 0;\n    }\n  }\n  return input;\n}\n\nfunction extractDate(input) {\n  // Receives an array of objects as input and extracts date entries into a Date format. Outputs data as \"dataWithDate\".\n  const dataWithDate = [];\n  for (let row = 0; row < input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n\n    const year = oldDate.slice(6, 10);\n    const month = oldDate.slice(3, 5);\n    const day = oldDate.slice(0, 2);\n    const newDate = year + \"-\" + month + \"-\" + day;\n    const dateFormatted = new Date(newDate);\n    entry.Date = dateFormatted;\n    dataWithDate.push(entry);\n  }\n  return dataWithDate;\n}\n\nfunction sortArray(input) {\n  // Receives an array of objects as input and sorts the entries based on Date, Datasource and Campaign as output.\n  const output = _.sortBy(input, [\"Date\", \"Datasource\", \"Campaign\"]);\n  return output;\n}\n\nfunction getColumns(input) {\n  // Receives an array of objects as input and outputs an array with unique keys (columns).\n  const output = Object.keys(input);\n  return output;\n}\n\nfunction getMetrics(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds numeric values.\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isNumber(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n\nfunction getDimensions(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds string values (excluding date formats).\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isString(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\nfunction getDates(inputData, inputColumns) {\n  // Receives an array of objects as inputData and array of unique keys as inputColumns.\n  // Outputs array of column names which holds date values.\n  const output = [];\n  for (let item = 0; item < inputColumns.length; item++) {\n    const col = inputColumns[item];\n    if (_.isDate(inputData[col])) {\n      output.push(col);\n    }\n  }\n  return output;\n}\n\nfunction formatDate(input) {\n  // Receives an array of objects as input and formats date entries into a \"DD. MMM\" format. Outputs data as \"dataWithDate\".\n  const formattedDateArray = [];\n  for (let row = 0; row < input.length; row++) {\n    const entry = { ...input[row] };\n    const oldDate = input[row].Date;\n    const dateFormatted = moment(oldDate, \"DD.MM.YYYY\").format(\"DD. MMM\");\n    entry.Date = dateFormatted;\n    formattedDateArray.push(entry);\n  }\n  return formattedDateArray;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}