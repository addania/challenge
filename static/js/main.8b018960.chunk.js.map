{"version":3,"sources":["components/Header.js","components/List.js","components/Subheader.js","components/Field.js","App.js","serviceWorker.js","index.js"],"names":["Header","Row","Col","sm","style","margin","textAlign","color","borderBottom","paddingBottom","List","props","message","styling","columns","Subheader","italics","fontStyle","listItems","listItem","dimensionsColumns","length","push","key","fontSize","paddingLeft","metricsColumns","Field","styles","App","useState","Date","Datasource","Campaign","Clicks","Impressions","data","console","log","JSON","stringify","input","tableColumns","Object","keys","dataWithDateFormat","dataWithDate","row","entry","oldDate","year","slice","month","day","dateFormatted","formatDate","sortedData","_","sortBy","sortArray","metrics","inputData","inputColumns","output","item","col","isNumber","getMetrics","dimensions","isString","getDimensions","dates","isDate","getDates","options","chart","type","xAxis","categories","yAxis","labels","format","Highcharts","getOptions","colors","title","text","opposite","gridLineWidth","align","series","name","className","Container","onChange","value","selected","multiple","highcharts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAIO,SAASA,IACd,OACE,6BACE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,wBAAIC,MACD,CACAC,OAAQ,WACRC,UAAW,OACXC,MAAM,UACNC,aAAc,sBACdC,cAAe,SANlB,uCCPL,SAASC,EAAKC,GAEnB,OACE,4BACEA,EAAMC,QACJ,0BAAMR,MAAOO,EAAME,SAChBF,EAAMG,QADT,MCFD,SAASC,EAAUJ,GAMxB,IALA,IAEMK,EAAQ,CAACC,UAAW,UAEnBC,EAAU,GACRC,EAAS,EAAEA,EAASR,EAAMS,kBAAkBC,OAAOF,IAC1DD,EAAUI,KAAK,kBAACZ,EAAD,CAAME,QANR,oBAM0BE,QAASH,EAAMS,kBAAkBD,GAAWN,QAASG,EAASO,IAAKJ,KAI5G,OACE,6BACE,kBAAClB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,yBAAKC,MACF,CACCC,OAAQ,WACRC,UAAW,OACXC,MAAM,UACNiB,SAAU,OACVhB,aAAc,sBACdC,cAAe,SAEf,wBAAIL,MAAO,CAACqB,YAAa,SACtBP,GAEH,uBAAGd,MAAQ,CAACoB,SAAU,SAAtB,4BAGA,8FACkE,0BAAMpB,MAAOY,GAAUL,EAAMe,eAAe,IAD9G,QAC6H,0BAAMtB,MAAOY,GAAUL,EAAMe,eAAe,IADzK,cAC8L,0BAAMtB,MAAOY,GAAUL,EAAMS,kBAAkB,GAA/C,KAD9L,QAC6P,0BAAMhB,MAAOY,GAAUL,EAAMS,kBAAkB,GAA/C,KAD7P,sBC/BT,SAASO,IACd,IAAMC,EAAO,CACXvB,OAAQ,WACRC,UAAW,OACXC,MAAM,WAER,OACE,6BACE,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,wBAAIC,MAAOwB,GAAX,WAIF,kBAAC1B,EAAA,EAAD,CAAKC,GAAI,GACP,wBAAIC,MAAOwB,GAAX,Y,sEC4GKC,MApHf,WAAgB,IAAD,EACWC,mBAAS,CAC7B,CAACC,KAAM,aAAcC,WAAY,eACjCC,SAAU,WAAYC,OAAQ,IAAKC,YAAa,MAChD,CAACJ,KAAM,aAAcC,WAAY,eACjCC,SAAU,gCAAiCC,OAAQ,MAAOC,YAAa,QACvE,CAACJ,KAAM,aAAcC,WAAY,iBACjCC,SAAU,cAAeC,OAAQ,EAAGC,YAAa,KACjD,CAACJ,KAAM,aAAcC,WAAY,iBACjCC,SAAU,uCAAwCC,OAAQ,GAAIC,YAAa,OAC3E,CAACJ,KAAM,aAAcC,WAAY,iBACjCC,SAAU,uCAAwCC,OAAQ,GAAIC,YAAa,SAXlE,mBACNC,EADM,aAaiBN,mBAAS,KAb1B,6BAgBbO,QAAQC,IAAIC,KAAKC,UAAUJ,IAG3B,IAqIkBK,EArIZC,GAqIYD,EArIYL,EAsIjBO,OAAOC,KAAKH,EAAM,KApI/BJ,QAAQC,IAAI,eAAgBI,GAE5B,IAAMG,EA+FR,SAAoBJ,GAElB,IADA,IAAMK,EAAa,GACVC,EAAI,EAAEA,EAAIN,EAAMpB,OAAO0B,IAAM,CACpC,IAAMC,EAAM,eAAIP,EAAMM,IAEhBE,EAAQR,EAAMM,GAAKhB,KAEnBmB,EAAKD,EAAQE,MAAM,EAAE,IAErBC,EAAMH,EAAQE,MAAM,EAAE,GAEtBE,EAAIJ,EAAQE,MAAM,EAAE,GAIpBG,EAAgB,IAAIvB,KAFZmB,EAAK,IAAIE,EAAM,IAAIC,GAIjCL,EAAMjB,KAAKuB,EAEXR,EAAaxB,KAAK0B,GAMpB,OAAOF,EAxHkBS,CAAWnB,GACpCC,QAAQC,IAAI,qBAAsBO,GAClC,IAAMW,EA0HR,SAAmBf,GAEjB,OADagB,IAAEC,OAAOjB,EAAO,CAAC,OAAQ,eA3HrBkB,CAAUd,GAC3BR,QAAQC,IAAI,cAAekB,GAG3B,IAAMI,EA2JR,SAAoBC,EAAWC,GAE7B,IADA,IAAMC,EAAO,GACJC,EAAK,EAAGA,EAAKF,EAAazC,OAAO2C,IAAO,CAE/C,IAAMC,EAAIH,EAAaE,GAGnBP,IAAES,SAASL,EAAU,GAAGI,KAC1BF,EAAOzC,KAAK2C,GAGhB,OAAOF,EAtKOI,CAAWX,EAAYd,GACrCL,QAAQC,IAAI,UAAWsB,GACvB,IAAMQ,EA8HR,SAAuBP,EAAWC,GAEhC,IADA,IAAMC,EAAO,GACJC,EAAK,EAAGA,EAAKF,EAAazC,OAAO2C,IAAO,CAE/C,IAAMC,EAAIH,EAAaE,GAGnBP,IAAEY,SAASR,EAAU,GAAGI,KAC1BF,EAAOzC,KAAK2C,GAGhB,OAAOF,EAzIUO,CAAcd,EAAYd,GAC3CL,QAAQC,IAAI,YAAa8B,GACzB,IAAMG,EAyIR,SAAkBV,EAAWC,GAE3B,IADA,IAAMC,EAAO,GACJC,EAAK,EAAGA,EAAKF,EAAazC,OAAO2C,IAAO,CAE/C,IAAMC,EAAIH,EAAaE,GAGnBP,IAAEe,OAAOX,EAAU,GAAGI,KACxBF,EAAOzC,KAAK2C,GAGhB,OAAOF,EApJKU,CAASjB,EAAYd,GACjCL,QAAQC,IAAI,QAASiC,GAOrB,IACMG,EAAU,CACdC,MAAO,CACPC,KAAM,UAENC,MAAO,CACLC,WAAY,CAAC,aAAc,aAAc,aAAc,aAAc,aAAc,eAGrFC,MAAM,CAAC,CACHC,OAAQ,CACJC,OAAQ,UACRL,KAAM,WACNxE,MAAO,CACHG,MAAO2E,IAAWC,aAAaC,OAAO,KAG9CC,MAAO,CACHC,KAAM,SACNlF,MAAO,CACHG,MAAO2E,IAAWC,aAAaC,OAAO,KAG9CG,UAAU,GAEX,CACCC,cAAe,EACfH,MAAO,CACHC,KAAM,cACNlF,MAAO,CACHG,MAAO2E,IAAWC,aAAaC,OAAO,KAG9CJ,OAAQ,CACJC,OAAQ,UACR7E,MAAO,CACHG,MAAO2E,IAAWC,aAAaC,OAAO,KAG/CG,UAAU,IAGbF,MAAO,CACLC,KAAM,cAAclB,EACpBqB,MAAO,QAETC,OAAQ,CACR,CACIC,KAAM,SAENvD,KAAM,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,IAGzB,CACEuD,KAAM,cACNZ,MAAO,EAEP3C,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,OAKjC,OACE,yBAAKwD,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAAC7F,EAAD,MACA,kBAACe,EAAD,CAAWK,kBAAmBgD,EAAY1C,eAAgBkC,IAC1D,kBAACjC,EAAD,MACA,kBAAC,IAAD,CAAamE,SAvEnB,WACE,OAAO,GAsEkC1D,KAxEzB,CAAC,CAAE2D,MAAM,MAAOC,UAAS,GAAQ,CAAED,MAAO,OAAS,CAAEA,MAAM,UAwEjBE,UAAQ,IAC9D,kBAAC,IAAD,CAAiBC,WAAYhB,IAAYR,QAASA,OC7GtCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b018960.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport function Header() {\n  return (\n    <div>\n      <Row>\n          <Col sm={12}>\n            <h2 style=\n              {{\n              \tmargin: \"30px 0px\", \n              \ttextAlign: \"left\", \n              \tcolor:\"#7F6A93\", \n              \tborderBottom: \"0.5px solid #E8E8EA\", \n              \tpaddingBottom: \"20px\"\n              }}>\n                Advertising Data ETL-V Challenge\n            </h2>\n          </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function List(props) {\n  \n  return (\n    <li>\n     {props.message}\n        <span style={props.styling}>\n          {props.columns}s\n        </span>\n    </li>              \n  );\n}\n\n","import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { List } from \"./List.js\"\n\nexport function Subheader(props) {\n  const message =\"Select zero to N \";\n  //const columnsArray= [\"Datasources\", \"Campaigns\", \"Impressions\", \"Clicks\", \"Date\"];\n  const italics={fontStyle: \"italic\"};\n\n  const  listItems=[];\n  for (let listItem=0;listItem<props.dimensionsColumns.length;listItem++){\n    listItems.push(<List message={message} columns={props.dimensionsColumns[listItem]} styling={italics} key={listItem}/>)\n  }\n  \n  \n  return (\n    <div>\n      <Row>\n          <Col sm={12}>\n            <div style=\n              {{\n                margin: \"30px 0px\", \n                textAlign: \"left\", \n                color:\"#828282\",\n                fontSize: \"18px\", \n                borderBottom: \"0.5px solid #E8E8EA\", \n                paddingBottom: \"20px\"\n              }}>\n                <ul style={{paddingLeft: \"20px\"}}>\n                  {listItems}\n                </ul>\n                <p style= {{fontSize: \"12px\"}} >\n                  [where zero means \"All\"] \n                </p>\n                <p>\n                  Hitting \"Apply\" filters the chart to show a timeseries for both <span style={italics}>{props.metricsColumns[0]}</span> and <span style={italics}>{props.metricsColumns[1]}</span> for given <span style={italics}>{props.dimensionsColumns[0]}s</span> and <span style={italics}>{props.dimensionsColumns[1]}s</span> - logical AND\n                </p>\n            </div>\n          </Col>\n      </Row>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport function Field() {\n  const styles={\n    margin: \"30px 0px\", \n    textAlign: \"left\", \n    color:\"#8DA1B9\"\n    }\n  return (\n    <div>\n      <Row>\n        <Col sm={4}>\n          <h2 style={styles}>\n            Filter\n          </h2>\n        </Col>\n        <Col sm={8}>\n          <h2 style={styles}>\n            Graph\n          </h2>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Container } from \"react-bootstrap\";\nimport './App.css';\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\nimport { Field } from \"./components/Field.js\";\nimport _ from 'lodash';\nimport Multiselect from 'react-bootstrap-multiselect';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nfunction App() {\n  const [data, setData] = useState([\n      {Date: \"01.01.2019\", Datasource: \"Facebook Ads\", \n      Campaign: \"Like Ads\", Clicks: 274, Impressions: 1979},\n      {Date: \"01.01.2019\", Datasource: \"Facebook Ads\", \n      Campaign: \"Offer Campaigns - Conversions\", Clicks: 10245, Impressions: 764627},\n      {Date: \"01.01.2019\", Datasource: \"Google Adwords\", \n      Campaign: \"B2B - Leads\", Clicks: 7, Impressions: 444},\n      {Date: \"01.01.2019\", Datasource: \"Google Adwords\", \n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\", Clicks: 16, Impressions: 12535},\n      {Date: \"20.01.2019\", Datasource: \"Google Adwords\", \n      Campaign: \"GDN Prospecting - App - Prio 1 Offer\", Clicks: 25, Impressions: 10535},\n    ])\n  const [columns, setColumns] = useState([]);\n\n  \n  console.log(JSON.stringify(data));\n  \n\n  const tableColumns=getColumns(data);\n\n  console.log(\"tableColumns\", tableColumns);\n  \n  const dataWithDateFormat=formatDate(data);\n  console.log(\"dataWithDateFormat\", dataWithDateFormat);\n  const sortedData=sortArray(dataWithDateFormat, );\n  console.log(\"sorted data\", sortedData);\n  \n\n  const metrics=getMetrics(sortedData, tableColumns);\n  console.log(\"metrics\", metrics);\n  const dimensions=getDimensions(sortedData, tableColumns);\n  console.log(\"dimension\", dimensions);\n  const dates=getDates(sortedData, tableColumns);\n  console.log(\"dates\", dates);\n  \n\n  const dataMulti = [{ value:'One', selected:true }, { value: 'Two' }, { value:'Three' }]\n  function handleChange(){\n    return 0\n  }\n  const mia=\"Mia\";\n  const options = {\n    chart: {\n    type: 'spline'\n    },\n    xAxis: {\n      categories: [\"2019-01-01\", \"2019-02-01\", \"2019-03-01\", \"2019-04-01\", \"2019-05-01\", \"2019-06-01\" ]\n    },\n    \n    yAxis:[{ // Primary yAxis\n        labels: {\n            format: '{value}',\n            type: \"datetime\",\n            style: {\n                color: Highcharts.getOptions().colors[0]\n            }\n        },\n        title: {\n            text: 'Clicks',\n            style: {\n                color: Highcharts.getOptions().colors[0]\n            }\n        },\n        opposite: false\n\n    }, { // Secondary yAxis\n        gridLineWidth: 0,\n        title: {\n            text: 'Impressions',\n            style: {\n                color: Highcharts.getOptions().colors[1]\n            }\n        },\n        labels: {\n            format: '{value}',\n            style: {\n                color: Highcharts.getOptions().colors[1]\n            }\n        },\n       opposite: true\n    }, ],\n\n    title: {\n      text: 'Datasources'+dimensions, \n      align: 'left'\n    },\n    series: [\n    { \n        name: \"Clicks\",\n        \n        data: [12, 4, 3, 4, 4, 4]\n      },\n   \n      { \n        name: \"Impressions\",\n        yAxis: 1,\n        \n        data: [10, 20, 30, 40, 30, 60]\n      },\n   ]\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Subheader dimensionsColumns={dimensions} metricsColumns={metrics}/>\n        <Field />\n        <Multiselect onChange={handleChange} data={dataMulti} multiple />\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction formatDate(input){\n  const dataWithDate=[];\n  for (let row=0;row<input.length;row++){\n    const entry={...input[row]};\n    //console.log(\"entry\", entry)\n    const oldDate=input[row].Date;\n    //console.log(oldDate);\n    const year=oldDate.slice(6,10)\n    //console.log(\"year\", year);\n    const month=oldDate.slice(3,5)\n    //console.log(\"month\", month);\n    const day=oldDate.slice(0,2)\n    //console.log(\"day\", day);\n    const newDate=year+\"-\"+month+\"-\"+day;\n    //console.log(\"newDate\", newDate);\n    const dateFormatted = new Date(newDate);\n    //console.log(\"dateFormatted\",dateFormatted);\n    entry.Date=dateFormatted;\n    //console.log(\"entryPOST\", entry);\n    dataWithDate.push(entry);\n  }\n  //console.log(\"dataWithDate\", dataWithDate);\n  //const output=_.sortBy(dataWithDate, [\"Date\", \"Datasource\", \"Campaign\"]);\n  \n  //console.log(\"dat OUTPUT\", output);\n  return dataWithDate;\n}\n\n\nfunction sortArray(input){\n  const output=_.sortBy(input, [\"Date\", \"Datasource\", ]);\n  return output;\n}\n\nfunction getColumns(input){\n  const output=Object.keys(input[0])\n  return output;\n}\n\nfunction getDimensions(inputData, inputColumns){\n  const output=[];\n  for (let item=0; item<inputColumns.length;item++){\n    //debugger;\n    const col=inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isString(inputData[0][col])){\n      output.push(col);\n    }\n  }\n  return output;\n}\nfunction getDates(inputData, inputColumns){\n  const output=[];\n  for (let item=0; item<inputColumns.length;item++){\n    //debugger;\n    const col=inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isDate(inputData[0][col])){\n      output.push(col);\n    }\n  }\n  return output;\n}\n\nfunction getMetrics(inputData, inputColumns){\n  const output=[];\n  for (let item=0; item<inputColumns.length;item++){\n    //debugger;\n    const col=inputColumns[item];\n    //console.log(\"col\",col);\n    //console.log(\"inputData[0].col\", inputData[0][col])\n    if (_.isNumber(inputData[0][col])){\n      output.push(col);\n    }\n  }\n  return output;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}