{"version":3,"sources":["components/Header.js","components/List.js","components/Subheader.js","components/Field.js","App.js","serviceWorker.js","index.js","data/DAMKBAoDBwoDBAkOBAYFCw.csv"],"names":["Header","Row","Col","sm","style","margin","textAlign","color","borderBottom","paddingBottom","List","props","message","styling","columns","Subheader","columnsArray","italics","fontStyle","fontSize","paddingLeft","Field","styles","App","className","Container","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6RAIO,SAASA,IACd,OACE,6BACE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,wBAAIC,MACD,CACAC,OAAQ,WACRC,UAAW,OACXC,MAAM,UACNC,aAAc,sBACdC,cAAe,SANlB,uCCPL,SAASC,EAAKC,GAEnB,OACE,4BACEA,EAAMC,QACJ,0BAAMR,MAAOO,EAAME,SAChBF,EAAMG,UCHV,SAASC,IACd,IACMC,EAAc,CAAC,cAAe,YAAa,cAAe,SAAU,QACpEC,EAAQ,CAACC,UAAW,UAE1B,OACE,6BACE,kBAACjB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,yBAAKC,MACF,CACCC,OAAQ,WACRC,UAAW,OACXC,MAAM,UACNY,SAAU,OACVX,aAAc,sBACdC,cAAe,SAEf,wBAAIL,MAAO,CAACgB,YAAa,SACvB,kBAACV,EAAD,CAAME,QAlBP,oBAkByBE,QAASE,EAAa,GAAIH,QAASI,IAC3D,kBAACP,EAAD,CAAME,QAnBP,oBAmByBE,QAASE,EAAa,GAAIH,QAASI,KAE7D,uBAAGb,MAAQ,CAACe,SAAU,SAAtB,4BAGA,8FACkE,0BAAMf,MAAOa,GAAb,UADlE,QAC0G,0BAAMb,MAAOa,GAAb,eAD1G,cAC6J,0BAAMb,MAAOa,GAAUD,EAAa,IADjM,QACgN,0BAAMZ,MAAOa,GAAUD,EAAa,IADpP,sBC1BT,SAASK,IACd,IAAMC,EAAO,CACXjB,OAAQ,WACRC,UAAW,OACXC,MAAM,WAER,OACE,6BACE,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,wBAAIC,MAAOkB,GAAX,WAIF,kBAACpB,EAAA,EAAD,CAAKC,GAAI,GACP,wBAAIC,MAAOkB,GAAX,YCEKC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,kBAACzB,EAAD,MACA,kBAACe,EAAD,MACA,kBAACM,EAAD,MACA,4BAAKK,QCHOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,qD","file":"static/js/main.f4ba295b.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport function Header() {\n  return (\n    <div>\n      <Row>\n          <Col sm={12}>\n            <h2 style=\n              {{\n              \tmargin: \"30px 0px\", \n              \ttextAlign: \"left\", \n              \tcolor:\"#7F6A93\", \n              \tborderBottom: \"0.5px solid #E8E8EA\", \n              \tpaddingBottom: \"20px\"\n              }}>\n                Advertising Data ETL-V Challenge\n            </h2>\n          </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function List(props) {\n  \n  return (\n    <li>\n     {props.message}\n        <span style={props.styling}>\n          {props.columns}\n        </span>\n    </li>              \n  );\n}\n\n","import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { List } from \"./List.js\"\n\nexport function Subheader() {\n  const message =\"Select zero to N \";\n  const columnsArray= [\"Datasources\", \"Campaigns\", \"Impressions\", \"Clicks\", \"Date\"];\n  const italics={fontStyle: \"italic\"};\n  \n  return (\n    <div>\n      <Row>\n          <Col sm={12}>\n            <div style=\n              {{\n                margin: \"30px 0px\", \n                textAlign: \"left\", \n                color:\"#828282\",\n                fontSize: \"18px\", \n                borderBottom: \"0.5px solid #E8E8EA\", \n                paddingBottom: \"20px\"\n              }}>\n                <ul style={{paddingLeft: \"20px\"}}>\n                  <List message={message} columns={columnsArray[0]} styling={italics}/>\n                  <List message={message} columns={columnsArray[1]} styling={italics}/>\n                </ul>\n                <p style= {{fontSize: \"12px\"}} >\n                  [where zero means \"All\"]\n                </p>\n                <p>\n                  Hitting \"Apply\" filters the chart to show a timeseries for both <span style={italics}>Clicks</span> and <span style={italics}>Impressions</span> for given <span style={italics}>{columnsArray[0]}</span> and <span style={italics}>{columnsArray[1]}</span> - logical AND\n                </p>\n            </div>\n          </Col>\n      </Row>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport { Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport function Field() {\n  const styles={\n    margin: \"30px 0px\", \n    textAlign: \"left\", \n    color:\"#8DA1B9\"\n    }\n  return (\n    <div>\n      <Row>\n        <Col sm={4}>\n          <h2 style={styles}>\n            Filter\n          </h2>\n        </Col>\n        <Col sm={8}>\n          <h2 style={styles}>\n            Graph\n          </h2>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Container } from \"react-bootstrap\";\nimport './App.css';\nimport data from \"./data/DAMKBAoDBwoDBAkOBAYFCw.csv\"\nimport { Header } from \"./components/Header.js\";\nimport { Subheader } from \"./components/Subheader.js\";\nimport { Field } from \"./components/Field.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Subheader />\n        <Field />\n        <h1>{data}</h1>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/DAMKBAoDBwoDBAkOBAYFCw.4e48680b.csv\";"],"sourceRoot":""}